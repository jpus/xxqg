#!/bin/sh /etc/rc.common
START=99
STOP=15
SERVICE_DAEMONIZE=1
NAME=overwall
VAR=/var/etc/overwall
FWI=$(uci -q get firewall.$NAME.path) || FWI=$VAR.include
CONFIG_FILE=$VAR-tcp
CONFIG_UDP_FILE=$VAR-udp.json
CONFIG_YB_FILE=$VAR-yb
CONFIG_NF_FILE=$VAR-nf
CONFIG_CU_FILE=$VAR-cu
CONFIG_TG_FILE=$VAR-tg.json
CONFIG_SOCK5_FILE=$VAR-socks5.json
T_FILE=/etc/overwall
CRON_FILE=/etc/crontabs/root
LOCK=/var/lock/overwall-boot.lock
LOC=/var/lock/overwall.lock
LOC_UCI=/var/lock/overwall-uci.lock
SDNS=/var/etc/smartdns
DNS_T=$SDNS/smartdns.conf
CON_T=$SDNS/rules.conf
PID=/var/run/smartdns.pid
K=/tmp/overwall
LOG=$K.log
BIN_DIR=/usr/share/overwall
DNS_FILE=/tmp/dnsmasq.d/dnsmasq-overwall.conf
DNS_DIR=/tmp/dnsmasq.overwall
O=$DNS_DIR/tmp
ref=/tmp/resolv.conf.d/resolv.conf.auto;[ -s $ref ] || ref=/tmp/resolv.conf.auto
REF=$(cat $ref 2>/dev/null | grep nameserver | awk '{print$2}')
redir_tcp=0
kcp_enable=0
redir_udp=0
redir_yb=0
redir_nf=0
redir_cu=0
redir_tg=0
smartdns_flag=0
chinadns_flag=0
local_enable=0
switch_enable=0
switch_server=$1
server_count=0

uci_get_by_name(){
	ret=$(uci -q get $NAME.$1.$2)
	echo ${ret:=$3}
}

uci_get_by_type(){
	ret=$(uci -q get $NAME.@$1[0].$2)
	echo ${ret:=$3}
}

GLOBAL_SERVER=$(uci_get_by_type global global_server)
gfw_mode=$(uci_get_by_type global gfw_mode 0)
run_mode=$(uci_get_by_type global run_mode router)
SO_SERVER=$(uci_get_by_type socks5_proxy server)
[ "$SO_SERVER" = same ] && SO_SERVER=$GLOBAL_SERVER
[ $(uci_get_by_name $SO_SERVER server) ] || SO_SERVER=
dns_mode_l=$(uci_get_by_type global dns_mode_l 0)

gen_log()(
	[ -s $LOG ] && echo '------------------------------------------------------------------------------------------------------------------------------------------------------------' >> $LOG
	log "Over Rules     : Check network status..."
)

log(){
	echo "$(date +'%Y-%m-%d %H:%M:%S') $*" >> $LOG
}

firstdown(){
	[ $1 = 1 ] && A=$BIN_DIR/checknetwork && B=check
	[ $1 = 2 ] && A=$BIN_DIR/update && B=--First
	service_start ${A} ${B}
}

f_bin(){
	ret=
	case $1 in
		ss)ret=$(which ss-redir);;
		ss-local)ret=$(which ss-local);;
		ss-server)ret=$(which ss-server);;
		ssr)ret=$(which ssr-redir);;
		ssr-local)ret=$(which ssr-local);;
		ssr-server)ret=$(which ssr-server);;
		vmess|vless)ret=$(which xray);;
		trojan)ret=$(which trojan-plus);;
		naiveproxy)ret=$(which naive);;
		socks5|tun)ret=$(which redsocks2);;
	esac
	echo $ret
}

gen_config_file(){
	sport=$(uci_get_by_name $1 server_port)
	pass=$(uci_get_by_name $1 password)
	timeout=$(uci_get_by_name $1 timeout 60)
	[ $(uci_get_by_name $1 fast_open 0) = 1 ] && fast=true || fast=false
	type=$(uci_get_by_name $1 type)
	case $2 in
		0)[ $kcp_enable = 1 ] && hostip=127.0.0.1 || hostip=$server;lport=$local_port;config_file=$CONFIG_FILE;PROTO=redir;;
		1)[ $type = naiveproxy ] && return 1;hostip=$udp_server;lport=$udp_local_port;config_file=$CONFIG_UDP_FILE;;
		2)hostip=$yb_ip;lport=$yb_local_port;config_file=$CONFIG_YB_FILE;PROTO=redir;;
		3)hostip=$nf_ip;lport=$nf_local_port;config_file=$CONFIG_NF_FILE;PROTO=redir;;
		4)hostip=$cu_ip;lport=$cu_local_port;config_file=$CONFIG_CU_FILE;PROTO=redir;;
		5)hostip=$tg_ip;lport=$tg_local_port;config_file=$CONFIG_TG_FILE;PROTO=redir;;
		6)hostip=$socks5_ip;lport=$socks5_port;config_file=$CONFIG_SOCK5_FILE;PROTO=socks;;
	esac
	case $type in
		ss)
			cat > $config_file <<EOF
{
"server":"$hostip",
"server_port":$sport,
"local_address":"0.0.0.0",
"local_port":$lport,
"password":"$pass",
"timeout":$timeout,
"method":"$(uci_get_by_name $1 encrypt_method_ss)",
"reuse_port":true,
"fast_open":$fast
}
EOF
			plugin=$(uci_get_by_name $1 plugin)
			if which $plugin >/dev/null 2>&1;then
				sed -i "s@$hostip\",@$hostip\",\n\"plugin\":\"$plugin\",\n\"plugin_opts\":\"$(uci_get_by_name $1 plugin_opts)\",@" $config_file
			fi;;
		ssr)
			cat > $config_file <<EOF
{
"server":"$hostip",
"server_port":$sport,
"local_address":"0.0.0.0",
"local_port":$lport,
"password":"$pass",
"timeout":$timeout,
"method":"$(uci_get_by_name $1 encrypt_method)",
"protocol":"$(uci_get_by_name $1 protocol)",
"protocol_param":"$(uci_get_by_name $1 protocol_param)",
"obfs":"$(uci_get_by_name $1 obfs)",
"obfs_param":"$(uci_get_by_name $1 obfs_param)",
"fast_open":$fast
}
EOF
;;
	naiveproxy)
		cat > $config_file <<EOF
{
"listen":"$PROTO://0.0.0.0:$lport",
"proxy":"https://$(uci_get_by_name $1 username):$pass@$(uci_get_by_name $1 server):$sport",
"concurrency":"${3:-1}"
}
EOF
;;
	esac
}

start_dns(){
	$(which smartdns) -c $DNS_T
	case $dns_mode in
		0)doh=$(echo $doh | sed 's/,/\n/g' | sed -e 's/162.159.36.1/1.1.1.1/' -e 's/162.159.46.1/1.0.0.1/' -e 's/ .*//');log "SmartDNS      : Use $(echo $doh | sed 's/ /,/g') to start on DoH mode (Foreign DNS)";;
		1)dns=$(echo $dns | sed 's/ /,/g');log "SmartDNS      : Use $dns to start on TCP mode (Foreign DNS)";;
	esac
	if [ "$YB" ];then
		case $dns_mode_y in
			0)doh_yb=$(echo $doh_yb | sed 's/,/\n/g' | sed 's/ .*//');log "SmartDNS      : Use $(echo $doh_yb | sed 's/ /,/g') to start on DoH mode (Youtube DNS)";;
			1)dns_yb=$(echo $dns_yb | sed 's/ /,/g');log "SmartDNS      : Use $dns_yb to start on TCP mode (Youtube DNS)";;
		esac
	fi
	if [ "$NF" ];then
		case $dns_mode_n in
			0)doh_nf=$(echo $doh_nf | sed 's/,/\n/g' | sed 's/ .*//');log "SmartDNS      : Use $(echo $doh_nf | sed 's/ /,/g') to start on DoH mode (Netflix DNS)";;
			1)dns_nf=$(echo $dns_nf | sed 's/ /,/g');log "SmartDNS      : Use $dns_nf to start on TCP mode (Netflix DNS)";;
		esac
	fi
	case $dns_mode_l in
		0)doh_l=$(echo $doh_l | sed 's/,/\n/g' | grep -v '\[' | sed 's/ .*//');log "SmartDNS      : Use $(echo $doh_l | sed 's/ /,/g') to start on DoH mode (Domestic DNS)";;
		1)dns_l=$(echo $dns_l | sed 's/ /,/g');log "SmartDNS      : Use $dns_l to start on UDP mode (Domestic DNS)";;
	esac
	if [ $run_mode = router ];then
		service_start $(which chinadns-ng) -l 5337 -c '127.0.0.1#5336' -t '127.0.0.1#5335' -4 china_v4 -6 china_v6 -f -n $([ $gfw_mode = 1 ] && echo -g $K/gfw.list)
		log "ChinaDNS      : Start ChinaDNS-NG successful!"
	fi
}

check_net(){
	if ! curl -so /dev/null -m 3 www.baidu.com;then
		log "Over Rules     : Wait for network to connect..."
		firstdown 1;exit 1
	fi
}

get_soip(){
	if [ $SO_SERVER ];then
		if [ "$1" = 1 ];then
			cat $LOG 2>/dev/null | sed -n '$p' | grep -q 'Check network status...' || gen_log
			check_net
			cat $LOG 2>/dev/null | sed -n '$p' | grep -q 'Check network status successful!' || log "Over Rules     : Check network status successful!"
		fi
		socks5_ip=$(uci_get_by_name $SO_SERVER server)
		if ! echo $socks5_ip | grep -E "^[0-9]{1,3}\.[0-9]{1,3}\.[0-9]{1,3}\.[0-9]{1,3}$">/dev/null;then
			if [ -f $LOCK ];then
				r=1
				while ! nslookup $socks5_ip >/dev/null 2>&1;do
					[ $r -ge 20 ] && return 1 || let r++
					sleep 1
				done
			fi
			if ! A=$(nslookup $socks5_ip 2>/dev/null | grep Address | awk -F' ' '{print$NF}' | grep -E "^[0-9]{1,3}\.[0-9]{1,3}\.[0-9]{1,3}\.[0-9]{1,3}$");then
				log "Socks5 Node : Unable to get server address.Check domain name!";return 1
			fi
			socks5_ip=$(echo "$A" | sed -n 1p)
		fi
	fi
}

shunt_rules(){
	YB_IP=$(uci_get_by_type access_control yb_fw_ips)
	NF_IP=$(uci_get_by_type access_control nf_fw_ips)
	CU_IP=$(uci_get_by_type access_control cu_fw_ips)
	TG_IP=$(uci_get_by_type access_control tg_fw_ips)
	[ $YB_SERVER ] && for i in $YB_IP;do ipset -! add youtube $i;done
	[ $NF_SERVER ] && Z=1 && for i in $NF_IP;do ipset -! add netflix $i;done
	[ $CU_SERVER ] && for i in $CU_IP;do ipset -! add custom $i;done
	[ $TG_SERVER ] && for i in $TG_IP;do ipset -! add telegram $i;done
	[ $YB_GL ] && for i in $YB_IP;do ipset -! add blacklist $i;done
	[ $NF_GL ] && Z=2 && for i in $NF_IP;do ipset -! add blacklist $i;done
	[ $CU_GL ] && for i in $CU_IP;do ipset -! add blacklist $i;done
	[ $TG_GL ] && for i in $TG_IP;do ipset -! add blacklist $i;done
	[ $NF_YB ] && Z=3 && for i in $NF_IP;do ipset -! add youtube $i;done
	[ $CU_YB ] && for i in $CU_IP;do ipset -! add youtube $i;done
	[ $CU_NF ] && for i in $CU_IP;do ipset -! add netflix $i;done
	[ $TG_YB ] && for i in $TG_IP;do ipset -! add youtube $i;done
	[ $TG_NF ] && for i in $TG_IP;do ipset -! add netflix $i;done
	[ $TG_CU ] && for i in $TG_IP;do ipset -! add custom $i;done
	[ ! "$Z" -a $run_mode = gfw ] && Z=4
}

rules(){
	server=$(uci_get_by_name $GLOBAL_SERVER server)
	if [ ! $server ];then
		get_soip 1;return 1
	fi
	if ps -w | grep overwall-tcp | grep -qv grep;then
		echo "Overwall has Started.";return 1
	fi
	cat $LOG 2>/dev/null | sed -n '$p' | grep -q 'Check network status...\|Download IP/GFW files...' || gen_log
	check_net
	cat $LOG 2>/dev/null | sed -n '$p' | grep -q 'Download IP/GFW files...' || (log "Over Rules     : Check network status successful!";log "Over Rules     : Check IP/GFW files...")
	mkdir -p /var/run /var/etc
	if [ ! -s $K/china.txt ] || [ $run_mode = router -a ! -s $K/china_v6.txt ] || ([ $run_mode = gfw -o $gfw_mode = 1 ] && [ ! -s $K/gfw.list ]);then
		log "Over Rules     : Download IP/GFW files..."
		firstdown 2;exit
	fi
	log "Over Rules     : Check IP/GFW files successful!"
	kcp_enable=$(uci_get_by_name $GLOBAL_SERVER kcp_enable 0)
	[ $kcp_enable = 1 ] && kcp_server=$server
	UDP_RELAY_SERVER=$(uci_get_by_type global udp_relay_server)
	[ "$UDP_RELAY_SERVER" = same ] && UDP_RELAY_SERVER=$GLOBAL_SERVER
	[ $(uci_get_by_name $UDP_RELAY_SERVER server) ] || UDP_RELAY_SERVER=
	if [ "$(uci_get_by_name $UDP_RELAY_SERVER kcp_enable)" = 1 ];then
		log "UDP Node      : Can't use KCPTUN to start as UDP Relay Server!"
		UDP_RELAY_SERVER=
	fi
	if [ $run_mode != oversea ];then
		YB_SERVER=$(uci_get_by_type global yb_server)
		NF_SERVER=$(uci_get_by_type global nf_server)
		CU_SERVER=$(uci_get_by_type global cu_server)
		TG_SERVER=$(uci_get_by_type global tg_server)
		[ "$YB_SERVER" = $GLOBAL_SERVER ] && YB_GL=1 || [ ! $(uci_get_by_name $YB_SERVER server) ] && YB_SERVER=
		[ "$NF_SERVER" = $GLOBAL_SERVER ] && NF_GL=1 || [ ! $(uci_get_by_name $NF_SERVER server) ] && NF_SERVER=
		[ "$CU_SERVER" = $GLOBAL_SERVER ] && CU_GL=1 || [ ! $(uci_get_by_name $CU_SERVER server) ] && CU_SERVER=
		[ "$TG_SERVER" = $GLOBAL_SERVER ] && TG_GL=1 && tg_gl=1 || [ ! $(uci_get_by_name $TG_SERVER server) ] && TG_SERVER=
		[ $run_mode = gfw -o "$TG_IP" ] || TG_GL=
		[ "$YB_GL" -o "$NF_GL" -o "$CU_GL" -o "$TG_GL" ] && P=-x
		[ "$YB_SERVER" -a "$NF_SERVER" = "$YB_SERVER" ] && NF_YB=1 && NF_SERVER=
		[ "$YB_SERVER" -a "$CU_SERVER" = "$YB_SERVER" ] && CU_YB=1 && CU_SERVER=
		[ "$NF_SERVER" -a "$CU_SERVER" = "$NF_SERVER" ] && CU_NF=1 && CU_SERVER=
		[ "$YB_SERVER" -a "$TG_SERVER" = "$YB_SERVER" ] && TG_YB=1 && TG_SERVER=
		[ "$NF_SERVER" -a "$TG_SERVER" = "$NF_SERVER" ] && TG_NF=1 && TG_SERVER=
		[ "$CU_SERVER" -a "$TG_SERVER" = "$CU_SERVER" ] && TG_CU=1 && TG_SERVER=
	fi
	if ! echo $server | grep -E "^[0-9]{1,3}\.[0-9]{1,3}\.[0-9]{1,3}\.[0-9]{1,3}$">/dev/null;then
		if [ -f $LOCK ];then
			r=1
			while ! nslookup $server >/dev/null 2>&1;do
				[ $r -ge 20 ] && return 1 || let r++
				sleep 1
			done
		fi
		if ! A=$(nslookup $server 2>/dev/null | grep Address | awk -F' ' '{print$NF}' | grep -E "^[0-9]{1,3}\.[0-9]{1,3}\.[0-9]{1,3}\.[0-9]{1,3}$");then
			log "Main Node      : Unable to get server address.Check domain name!";return 1
		fi
		server=$(echo "$A" | sed -n 1p)
	fi

	local_port=$(uci_get_by_name $GLOBAL_SERVER local_port 1234)
	lan_ac_ips=$(uci_get_by_type access_control lan_ac_ips)
	lan_ac_mode=$(uci_get_by_type access_control lan_ac_mode b)
	if [ $GLOBAL_SERVER = "$UDP_RELAY_SERVER" ];then
		UDP=1
		udp_server=$server
		udp_local_port=$local_port
	elif [ $UDP_RELAY_SERVER ];then
		udp_server=$(uci_get_by_name $UDP_RELAY_SERVER server)
		if ! echo $udp_server | grep -E "^[0-9]{1,3}\.[0-9]{1,3}\.[0-9]{1,3}\.[0-9]{1,3}$">/dev/null;then
			if [ -f $LOCK ];then
				r=1
				while ! nslookup $udp_server >/dev/null 2>&1;do
					[ $r -ge 20 ] && return 1 || let r++
					sleep 1
				done
			fi
			if ! A=$(nslookup $udp_server 2>/dev/null | grep Address | awk -F' ' '{print$NF}' | grep -E "^[0-9]{1,3}\.[0-9]{1,3}\.[0-9]{1,3}\.[0-9]{1,3}$");then
				log "UDP Node      : Unable to get server address.Check domain name!";return 1
			fi
			udp_server=$(echo "$A" | sed -n 1p)
		fi
		udp_local_port=$(uci_get_by_name $UDP_RELAY_SERVER local_port 1234)
		UDP=1
	fi

	ttype=$(uci_get_by_name $GLOBAL_SERVER type)
	utype=$(uci_get_by_name $UDP_RELAY_SERVER type)
	if [ $UDP ];then
		[ $ttype = trojan -o $utype = trojan ] && [ $udp_local_port = $local_port ] && let udp_local_port=local_port+1;UDP="-S $udp_server -L $udp_local_port"
	fi

	case $run_mode in
		router)mode=-r;;
		oversea)mode=-c;;
		all)mode=-z;;
	esac

	if [ $YB_SERVER ];then
		yb_ip=$(uci_get_by_name $YB_SERVER server)
		if ! echo $yb_ip | grep -E "^[0-9]{1,3}\.[0-9]{1,3}\.[0-9]{1,3}\.[0-9]{1,3}$">/dev/null;then
			if [ -f $LOCK ];then
				r=1
				while ! nslookup $yb_ip >/dev/null 2>&1;do
					[ $r -ge 20 ] && return 1 || let r++
					sleep 1
				done
			fi
			if ! A=$(nslookup $yb_ip 2>/dev/null | grep Address | awk -F' ' '{print$NF}' | grep -E "^[0-9]{1,3}\.[0-9]{1,3}\.[0-9]{1,3}\.[0-9]{1,3}$");then
				log "Y2B Node       : Unable to get server address.Check domain name!";return 1
			fi
			yb_ip=$(echo "$A" | sed -n 1p)
		fi
		ytype=$(uci_get_by_name $YB_SERVER type)
		yb_local_port=$(uci_get_by_name $YB_SERVER local_port 1234)
		[ $yb_local_port = $local_port ] && let yb_local_port=local_port+1
		[ "$utype" = trojan -o $ytype = trojan ] && [ $yb_local_port = "$udp_local_port" ] && let yb_local_port=yb_local_port+1
		YB=1
	fi
	[ $YB ] && YB="-N $yb_ip -P $yb_local_port"

	if [ $NF_SERVER ];then
		nf_ip=$(uci_get_by_name $NF_SERVER server)
		if ! echo $nf_ip | grep -E "^[0-9]{1,3}\.[0-9]{1,3}\.[0-9]{1,3}\.[0-9]{1,3}$">/dev/null;then
			if [ -f $LOCK ];then
				r=1
				while ! nslookup $nf_ip >/dev/null 2>&1;do
					[ $r -ge 20 ] && return 1 || let r++
					sleep 1
				done
			fi
			if ! A=$(nslookup $nf_ip 2>/dev/null | grep Address | awk -F' ' '{print$NF}' | grep -E "^[0-9]{1,3}\.[0-9]{1,3}\.[0-9]{1,3}\.[0-9]{1,3}$");then
				log "NF Node         : Unable to get server address.Check domain name!";return 1
			fi
			nf_ip=$(echo "$A" | sed -n 1p)
		fi
		ntype=$(uci_get_by_name $NF_SERVER type)
		nf_local_port=$(uci_get_by_name $NF_SERVER local_port 1234)
		[ $nf_local_port = $local_port ] && let nf_local_port=local_port+1
		[ "$utype" = trojan -o $ntype = trojan ] && [ $nf_local_port = "$udp_local_port" ] && let nf_local_port=nf_local_port+1
		[ $nf_local_port = "$yb_local_port" ] && let nf_local_port=nf_local_port+1
		NF=1
	fi
	[ $NF ] && NF="-Y $nf_ip -Z $nf_local_port"

	if [ $CU_SERVER ];then
		cu_ip=$(uci_get_by_name $CU_SERVER server)
		if ! echo $cu_ip | grep -E "^[0-9]{1,3}\.[0-9]{1,3}\.[0-9]{1,3}\.[0-9]{1,3}$">/dev/null;then
			if [ -f $LOCK ];then
				r=1
				while ! nslookup $cu_ip >/dev/null 2>&1;do
					[ $r -ge 20 ] && return 1 || let r++
					sleep 1
				done
			fi
			if ! A=$(nslookup $cu_ip 2>/dev/null | grep Address | awk -F' ' '{print$NF}' | grep -E "^[0-9]{1,3}\.[0-9]{1,3}\.[0-9]{1,3}\.[0-9]{1,3}$");then
				log "Custom Node : Unable to get server address.Check domain name!";return 1
			fi
			cu_ip=$(echo "$A" | sed -n 1p)
		fi
		ctype=$(uci_get_by_name $CU_SERVER type)
		cu_local_port=$(uci_get_by_name $CU_SERVER local_port 1234)
		[ $cu_local_port = $local_port ] && let cu_local_port=local_port+1
		[ "$utype" = trojan -o $ctype = trojan ] && [ $cu_local_port = "$udp_local_port" ] && let cu_local_port=cu_local_port+1
		[ $cu_local_port = "$yb_local_port" ] && let cu_local_port=cu_local_port+1
		[ $cu_local_port = "$nf_local_port" ] && let cu_local_port=cu_local_port+1
		CU=1
	fi
	[ $CU ] && CU="-H $cu_ip -I $cu_local_port"

	if [ $TG_SERVER ];then
		tg_ip=$(uci_get_by_name $TG_SERVER server)
		if ! echo $tg_ip | grep -E "^[0-9]{1,3}\.[0-9]{1,3}\.[0-9]{1,3}\.[0-9]{1,3}$">/dev/null;then
			if [ -f $LOCK ];then
				r=1
				while ! nslookup $tg_ip >/dev/null 2>&1;do
					[ $r -ge 20 ] && return 1 || let r++
					sleep 1
				done
			fi
			if ! A=$(nslookup $tg_ip 2>/dev/null | grep Address | awk -F' ' '{print$NF}' | grep -E "^[0-9]{1,3}\.[0-9]{1,3}\.[0-9]{1,3}\.[0-9]{1,3}$");then
				log "TG Node        : Unable to get server address.Check domain name!";return 1
			fi
			tg_ip=$(echo "$A" | sed -n 1p)
		fi
		gtype=$(uci_get_by_name $TG_SERVER type)
		tg_local_port=$(uci_get_by_name $TG_SERVER local_port 1234)
		[ $tg_local_port = $local_port ] && let tg_local_port=local_port+1
		[ "$utype" = trojan -o $gtype = trojan ] && [ $tg_local_port = "$udp_local_port" ] && let tg_local_port=tg_local_port+1
		[ $tg_local_port = "$yb_local_port" ] && let tg_local_port=tg_local_port+1
		[ $tg_local_port = "$nf_local_port" ] && let tg_local_port=tg_local_port+1
		[ $tg_local_port = "$cu_local_port" ] && let tg_local_port=tg_local_port+1
		TG=1
	fi
	[ $TG ] && TG="-J $tg_ip -K $tg_local_port"

	get_soip
	log "Over Rules     : Get all server address successful!"
	if [ "$lan_ac_ips" ];then
		case $lan_ac_mode in
			w|W|b|B)local ac_ips="$lan_ac_mode$lan_ac_ips";;
		esac
	fi

	dports=$(uci_get_by_type global dports 1)
	if [ $dports = 2 ];then
		proxyport="-m multiport --dports 22,53,80,143,443,465,587,853,993,995,9418"
	elif [ $dports != 1 ];then
		dports=$(echo $dports | sed 's/，/,/g')
		proxyport="-m multiport --dports $dports"
	fi

	[ $(uci_get_by_type global dns_hijack 1) = 1 ] && D=-y

	r=1
	while ! $BIN_DIR/rules -s "$server" -l "$local_port" -a "$ac_ips" -b "$(uci_get_by_type access_control wan_bp_ips)" -w "$(uci_get_by_type access_control wan_fw_ips)" \
		-p "$(uci_get_by_type access_control lan_fp_ips)" -G "$(uci_get_by_type access_control lan_gm_ips)" -D "$proxyport" $mode $UDP $YB $NF $CU $TG $P $D;do
		[ $r -ge 20 ] && log "Over Rules     : Start iptables rules failed!" && return 1
		let r++;sleep 1
	done
	shunt_rules
	log "Over Rules     : Start iptables rules successful!"
}

start_tcp(){
	if [ $kcp_enable = 1 ];then
		cmd=$(which kcptun-client) || cmd=0
		[ ! $cmd ] && log "Main Node      : Can't find KCPTUN program, start failed!" && return 1
		[ $($cmd -v 2>/dev/null | grep kcptun | wc -l) = 0 ] && return 1
		kcp_port=$(uci_get_by_name $GLOBAL_SERVER kcp_port)
		server_port=$(uci_get_by_name $GLOBAL_SERVER server_port)
		password=$(uci_get_by_name $GLOBAL_SERVER kcp_password)
		kcp_param=$(uci_get_by_name $GLOBAL_SERVER kcp_param)
		[ "$password" ] && password="--key "${password}
		service_start $cmd -r $kcp_server:$kcp_port -l :$server_port $password $kcp_param
	fi
	threads=$(uci_get_by_type global threads 0)
	[ $threads = 0 ] && threads=$(cat /proc/cpuinfo | grep 'processor' | wc -l)
	cmd=$(f_bin $ttype)
	[ ! $cmd ] && log "Main Node      : Can't find $(echo $ttype | tr a-z A-Z) program, start failed!" && return 1
	[ $YB_GL ] && CONFIG_FILE=$CONFIG_FILE-yb
	[ $NF_GL ] && CONFIG_FILE=$CONFIG_FILE-nf
	[ $CU_GL ] && CONFIG_FILE=$CONFIG_FILE-cu
	[ $tg_gl ] && CONFIG_FILE=$CONFIG_FILE-tg
	CONFIG_FILE=$CONFIG_FILE.json
	gen_config_file $GLOBAL_SERVER 0 $threads
	redir_tcp=1
	case $ttype in
		ss|ssr)
			redir_tcp=$threads
			for i in $(seq 1 $threads);do
				$cmd -c $CONFIG_FILE >/dev/null 2>&1 &
			done
			[ $ttype = ss ] && name=Shadowsocks || name=ShadowsocksR
			log "Main Node      : $name $threads Threads Started!";;
		vmess|vless)
			if [ "$SO_SERVER" = $GLOBAL_SERVER ];then
				port=$(uci_get_by_type socks5_proxy local_port 1080);socks5_start=1;V2=${CONFIG_FILE%.*}-socks5.json
			else
				port=0;V2=$CONFIG_FILE
			fi
			$BIN_DIR/genxrayconfig $GLOBAL_SERVER tcp $local_port $port $server > $V2
			sed -i 's/\\//g' $V2
			$cmd -c $V2 >/dev/null 2>&1 &
			log "Main Node      : $($cmd -version | head -1 | awk '{print$1,$2}') Started!"
			if [ "$socks5_start" = 1 ];then
				log "Socks5 Node : $($cmd -version | head -1 | awk '{print$1,$2}') Started!"
			fi;;
		trojan)
			redir_tcp=$threads
			$BIN_DIR/gentrojanconfig $GLOBAL_SERVER nat $local_port $server > $CONFIG_FILE
			sed -i 's/\\//g' $CONFIG_FILE
			for i in $(seq 1 $threads);do
				$cmd -c $CONFIG_FILE >/dev/null 2>&1 &
			done
			log "Main Node      : Trojan(Ver $($cmd --version 2>&1 | head -1 | awk '{print$3}')) $threads Threads Started!";;
		naiveproxy)
			$cmd $CONFIG_FILE >/dev/null 2>&1 &
			log "Main Node      : $($cmd --version | head -1) Threads Started!";;
		socks5)
			redir_tcp=$threads
			$BIN_DIR/genred2config $CONFIG_FILE socks5 tcp $local_port $server $(uci_get_by_name $GLOBAL_SERVER server_port) \
			$(uci_get_by_name $GLOBAL_SERVER auth_enable 0) $(uci_get_by_name $GLOBAL_SERVER username) $(uci_get_by_name $GLOBAL_SERVER password)
			for i in $(seq 1 $threads);do
				$cmd -c $CONFIG_FILE >/dev/null 2>&1
			done
			log "Main Node      : Socks5 $threads Threads Started!";;
		tun)
			redir_tcp=$threads
			$BIN_DIR/genred2config $CONFIG_FILE vpn $(uci_get_by_name $GLOBAL_SERVER iface br-lan) $local_port
			for i in $(seq 1 $threads);do
				$cmd -c $CONFIG_FILE >/dev/null 2>&1
			done
			log "Main Node      : Network Tunnel $threads Threads Started!";;
	esac
}

start_udp(){
	cmd=$(f_bin $utype)
	[ ! $cmd ] && log "UDP Node      : Can't find $(echo $utype | tr a-z A-Z) program, start failed!" && return 1
	redir_udp=1
	case $utype in
		ss|ssr)
			gen_config_file $UDP_RELAY_SERVER 1
			$cmd -c $CONFIG_UDP_FILE -U >/dev/null 2>&1 &
			[ $utype = ss ] && name=Shadowsocks || name=ShadowsocksR
			log "UDP Node      : $name Started!";;
		vmess|vless)
			$BIN_DIR/genxrayconfig $UDP_RELAY_SERVER udp $udp_local_port 0 $udp_server > $CONFIG_UDP_FILE
			sed -i 's/\\//g' $CONFIG_UDP_FILE
			$cmd -c $CONFIG_UDP_FILE >/dev/null 2>&1 &
			log "UDP Node      : $($cmd -version | head -1 | awk '{print$1,$2}') Started!";;
		trojan)
			$BIN_DIR/gentrojanconfig $UDP_RELAY_SERVER nat $udp_local_port $udp_server > $CONFIG_UDP_FILE
			sed -i 's/\\//g' $CONFIG_UDP_FILE
			$cmd -c $CONFIG_UDP_FILE >/dev/null 2>&1 &
			log "UDP Node      : Trojan(Ver $($cmd --version 2>&1 | head -1 | awk '{print$3}')) Started!";;
		naiveproxy)
			redir_udp=0
			log "$($cmd --version | head -1) UDP Relay not supported!";;
		socks5)
			$BIN_DIR/genred2config $CONFIG_UDP_FILE socks5 udp $udp_local_port $udp_server \
			$(uci_get_by_name $UDP_RELAY_SERVER server_port) $(uci_get_by_name $UDP_RELAY_SERVER auth_enable 0) $(uci_get_by_name $UDP_RELAY_SERVER username) $(uci_get_by_name $UDP_RELAY_SERVER password)
			$cmd -c $CONFIG_UDP_FILE >/dev/null 2>&1
			log "UDP Node      : Socks5 Started!";;
		tun)
			redir_udp=0
			log "Network Tunnel UDP Relay not supported!";;
	esac
}

start_yb(){
	cmd=$(f_bin $ytype)
	[ ! $cmd ] && log "Y2B Node       : Can't find $(echo $ytype | tr a-z A-Z) program, start failed!" && return 1
	[ $NF_YB ] && CONFIG_YB_FILE=$CONFIG_YB_FILE-nf
	[ $CU_YB ] && CONFIG_YB_FILE=$CONFIG_YB_FILE-cu
	[ $TG_YB ] && CONFIG_YB_FILE=$CONFIG_YB_FILE-tg
	CONFIG_YB_FILE=$CONFIG_YB_FILE.json
	gen_config_file $YB_SERVER 2
	redir_yb=1
	case $ytype in
		ss|ssr)
			$cmd -c $CONFIG_YB_FILE >/dev/null 2>&1 &
			[ $ytype = ss ] && name=Shadowsocks || name=ShadowsocksR
			log "Y2B Node       : $name Started!";;
		vmess|vless)
			$BIN_DIR/genxrayconfig $YB_SERVER tcp $yb_local_port 0 $yb_ip > $CONFIG_YB_FILE
			sed -i 's/\\//g' $CONFIG_YB_FILE
			$cmd -c $CONFIG_YB_FILE >/dev/null 2>&1 &
			log "Y2B Node       : $($cmd -version | head -1 | awk '{print$1,$2}') Started!";;
		trojan)
			$BIN_DIR/gentrojanconfig $YB_SERVER nat $yb_local_port $yb_ip > $CONFIG_YB_FILE
			sed -i 's/\\//g' $CONFIG_YB_FILE
			$cmd -c $CONFIG_YB_FILE >/dev/null 2>&1 &
			log "Y2B Node       : Trojan(Ver $($cmd --version 2>&1 | head -1 | awk '{print$3}')) Started!";;
		naiveproxy)
			$cmd $CONFIG_YB_FILE >/dev/null 2>&1 &
			log "Y2B Node       : $($cmd --version | head -1) Started!";;
		socks5)
			$BIN_DIR/genred2config $CONFIG_YB_FILE socks5 tcp $yb_local_port $yb_ip $(uci_get_by_name $YB_SERVER server_port) \
			$(uci_get_by_name $YB_SERVER auth_enable 0) $(uci_get_by_name $YB_SERVER username) $(uci_get_by_name $YB_SERVER password)
			$cmd -c $CONFIG_YB_FILE >/dev/null 2>&1
			log "Y2B Node       : Socks5 Started!";;
		tun)
			$BIN_DIR/genred2config $CONFIG_YB_FILE vpn $(uci_get_by_name $YB_SERVER iface "br-lan") $yb_local_port
			$cmd -c $CONFIG_YB_FILE >/dev/null 2>&1
			log "Y2B Node       : Network Tunnel REDIRECT Started!";;
	esac
}

start_nf(){
	cmd=$(f_bin $ntype)
	[ ! $cmd ] && log "NF Node         : Can't find $(echo $ntype | tr a-z A-Z) program, start failed!" && return 1
	[ $CU_NF ] && CONFIG_NF_FILE=$CONFIG_NF_FILE-cu
	[ $TG_NF ] && CONFIG_NF_FILE=$CONFIG_NF_FILE-tg
	CONFIG_NF_FILE=$CONFIG_NF_FILE.json
	gen_config_file $NF_SERVER 3
	redir_nf=1
	case $ntype in
		ss|ssr)
			$cmd -c $CONFIG_NF_FILE >/dev/null 2>&1 &
			[ $ntype = ss ] && name=Shadowsocks || name=ShadowsocksR
			log "NF Node         : $name Started!";;
		vmess|vless)
			$BIN_DIR/genxrayconfig $NF_SERVER tcp $nf_local_port 0 $nf_ip > $CONFIG_NF_FILE
			sed -i 's/\\//g' $CONFIG_NF_FILE
			$cmd -c $CONFIG_NF_FILE >/dev/null 2>&1 &
			log "NF Node         : $($cmd -version | head -1 | awk '{print$1,$2}') Started!";;
		trojan)
			$BIN_DIR/gentrojanconfig $NF_SERVER nat $nf_local_port $nf_ip > $CONFIG_NF_FILE
			sed -i 's/\\//g' $CONFIG_NF_FILE
			$cmd -c $CONFIG_NF_FILE >/dev/null 2>&1 &
			log "NF Node         : Trojan(Ver $($cmd --version 2>&1 | head -1 | awk '{print$3}')) Started!";;
		naiveproxy)
			$cmd $CONFIG_NF_FILE >/dev/null 2>&1 &
			log "NF Node         : $($cmd --version | head -1) Started!";;
		socks5)
			$BIN_DIR/genred2config $CONFIG_NF_FILE socks5 tcp $nf_local_port $nf_ip $(uci_get_by_name $NF_SERVER server_port) \
			$(uci_get_by_name $NF_SERVER auth_enable 0) $(uci_get_by_name $NF_SERVER username) $(uci_get_by_name $NF_SERVER password)
			$cmd -c $CONFIG_NF_FILE >/dev/null 2>&1
			log "NF Node         : Socks5 Started!";;
		tun)
			$BIN_DIR/genred2config $CONFIG_NF_FILE vpn $(uci_get_by_name $NF_SERVER iface "br-lan") $nf_local_port
			$cmd -c $CONFIG_NF_FILE >/dev/null 2>&1
			log "NF Node         : Network Tunnel REDIRECT Started!";;
	esac
}

start_cu(){
	cmd=$(f_bin $ctype)
	[ ! $cmd ] && log "Custom Node : Can't find $(echo $ctype | tr a-z A-Z) program, start failed!" && return 1
	[ $TG_CU ] && CONFIG_CU_FILE=$CONFIG_CU_FILE-tg
	CONFIG_CU_FILE=$CONFIG_CU_FILE.json
	gen_config_file $CU_SERVER 4
	redir_cu=1
	case $ctype in
		ss|ssr)
			$cmd -c $CONFIG_CU_FILE >/dev/null 2>&1 &
			[ $ctype = ss ] && name=Shadowsocks || name=ShadowsocksR
			log "Custom Node : $name Started!";;
		vmess|vless)
			$BIN_DIR/genxrayconfig $CU_SERVER tcp $cu_local_port 0 $cu_ip > $CONFIG_CU_FILE
			sed -i 's/\\//g' $CONFIG_CU_FILE
			$cmd -c $CONFIG_CU_FILE >/dev/null 2>&1 &
			log "Custom Node : $($cmd -version | head -1 | awk '{print$1,$2}') Started!";;
		trojan)
			$BIN_DIR/gentrojanconfig $CU_SERVER nat $cu_local_port $cu_ip > $CONFIG_CU_FILE
			sed -i 's/\\//g' $CONFIG_CU_FILE
			$cmd -c $CONFIG_CU_FILE >/dev/null 2>&1 &
			log "Custom Node : Trojan(Ver $($cmd --version 2>&1 | head -1 | awk '{print$3}')) Started!";;
		naiveproxy)
			$cmd $CONFIG_CU_FILE >/dev/null 2>&1 &
			log "Custom Node : $($cmd --version | head -1) Started!";;
		socks5)
			$BIN_DIR/genred2config $CONFIG_CU_FILE socks5 tcp $cu_local_port $cu_ip $(uci_get_by_name $CU_SERVER server_port) \
			$(uci_get_by_name $CU_SERVER auth_enable 0) $(uci_get_by_name $CU_SERVER username) $(uci_get_by_name $CU_SERVER password)
			$cmd -c $CONFIG_CU_FILE >/dev/null 2>&1
			log "Custom Node : Socks5 Started!";;
		tun)
			$BIN_DIR/genred2config $CONFIG_CU_FILE vpn $(uci_get_by_name $CU_SERVER iface "br-lan") $cu_local_port
			$cmd -c $CONFIG_CU_FILE >/dev/null 2>&1
			log "Custom Node : Network Tunnel REDIRECT Started!";;
	esac
}

start_tg(){
	cmd=$(f_bin $gtype)
	[ ! $cmd ] && log "TG Node        : Can't find $(echo $gtype | tr a-z A-Z) program, start failed!" && return 1
	gen_config_file $TG_SERVER 5
	redir_tg=1
	case $gtype in
		ss|ssr)
			$cmd -c $CONFIG_TG_FILE >/dev/null 2>&1 &
			[ $gtype = ss ] && name=Shadowsocks || name=ShadowsocksR
			log "TG Node        : $name Started!";;
		vmess|vless)
			$BIN_DIR/genxrayconfig $TG_SERVER tcp $tg_local_port 0 $tg_ip > $CONFIG_TG_FILE
			sed -i 's/\\//g' $CONFIG_TG_FILE
			$cmd -c $CONFIG_TG_FILE >/dev/null 2>&1 &
			log "TG Node        : $($cmd -version | head -1 | awk '{print$1,$2}') Started!";;
		trojan)
			$BIN_DIR/gentrojanconfig $TG_SERVER nat $tg_local_port $tg_ip > $CONFIG_TG_FILE
			sed -i 's/\\//g' $CONFIG_TG_FILE
			$cmd -c $CONFIG_TG_FILE >/dev/null 2>&1 &
			log "TG Node        : Trojan(Ver $($cmd --version 2>&1 | head -1 | awk '{print$3}')) Started!";;
		naiveproxy)
			$cmd $CONFIG_TG_FILE >/dev/null 2>&1 &
			log "TG Node        : $($cmd --version | head -1) Started!";;
		socks5)
			$BIN_DIR/genred2config $CONFIG_TG_FILE socks5 tcp $tg_local_port $tg_ip $(uci_get_by_name $TG_SERVER server_port) \
			$(uci_get_by_name $TG_SERVER auth_enable 0) $(uci_get_by_name $TG_SERVER username) $(uci_get_by_name $TG_SERVER password)
			$cmd -c $CONFIG_TG_FILE >/dev/null 2>&1
			log "TG Node        : Socks5 Started!";;
		tun)
			$BIN_DIR/genred2config $CONFIG_TG_FILE vpn $(uci_get_by_name $TG_SERVER iface "br-lan") $tg_local_port
			$cmd -c $CONFIG_TG_FILE >/dev/null 2>&1
			log "TG Node        : Network Tunnel REDIRECT Started!";;
	esac
}

gen_dns(){
	dns_mode=$(uci_get_by_type global dns_mode 0)
	dns_mode_y=$(uci_get_by_type global dns_mode_y 0)
	dns_mode_n=$(uci_get_by_type global dns_mode_n 0)
	dns_mode_c=$(uci_get_by_type global dns_mode_c 0)
	[ $dns_mode = 0 ] && dns=$(uci_get_by_type global dns 1) || dns=$(uci_get_by_type global tcp_dns 1)
	if [ "$YB" ];then
		[ $dns_mode_y = 0 ] && dns_yb=$(uci_get_by_type global dns_yb 2) || dns_yb=$(uci_get_by_type global tcp_dns_yb 2)
		[ $dns = $dns_yb ] && dns=1 && dns_yb=2
	fi
	if [ "$NF" ];then
		[ $dns_mode_n = 0 ] && dns_nf=$(uci_get_by_type global dns_nf 3) || dns_nf=$(uci_get_by_type global tcp_dns_nf 3)
		[ $dns = $dns_nf ] && dns=1 && dns_nf=3
		[ $dns_nf = "$dns_yb" ] && dns_yb=2 && dns_nf=3
		[ $dns = "$dns_yb" ] && dns=1 && dns_yb=2
	fi

	if [ "$CU" ];then
		[ $dns_mode_c = 0 ] && dns_cu=$(uci_get_by_type global dns_cu 4) || dns_cu=$(uci_get_by_type global tcp_dns_cu 4)
		[ $dns = $dns_cu ] && dns=1 && dns_cu=4
		[ $dns_cu = "$dns_yb" ] && dns_yb=2 && dns_cu=4
		[ $dns_cu = "$dns_nf" ] && dns_nf=3 && dns_cu=4
		[ "$dns_yb" -a "$dns_nf" -a "$dns_yb" = "$dns_nf" ] && dns_yb=2 && dns_nf=3
		[ $dns = "$dns_yb" ] && dns=1 && dns_yb=2
		[ $dns = "$dns_nf" ] && dns=1 && dns_nf=3
	fi

	if [ $dns_mode = 0 ];then
		case $dns in
			1)doh="https://162.159.36.1/dns-query -tls-host-verify cloudflare-dns.com -http-host cloudflare-dns.com,https://162.159.46.1/dns-query -tls-host-verify cloudflare-dns.com -http-host cloudflare-dns.com";dns="162.159.36.1 162.159.46.1 1.1.1.1 1.0.0.1";;
			2)doh="https://8.8.8.8/dns-query -tls-host-verify dns.google -http-host dns.google,https://8.8.4.4/dns-query -tls-host-verify dns.google -http-host dns.google";dns="8.8.8.8 8.8.4.4";;
			3)doh="https://9.9.9.9/dns-query -tls-host-verify *.quad9.net -http-host dns.quad9.net,https://149.112.112.112/dns-query -tls-host-verify *.quad9.net -http-host dns.quad9.net";dns="9.9.9.9 149.112.112.112";;
			4)doh="https://9.9.9.11/dns-query -tls-host-verify *.quad9.net -http-host dns11.quad9.net,https://149.112.112.11/dns-query -tls-host-verify *.quad9.net -http-host dns11.quad9.net";dns="9.9.9.11 149.112.112.11";;
			5)doh="https://146.112.41.2/dns-query -tls-host-verify doh.opendns.com -http-host doh.opendns.com";dns="208.67.222.222 208.67.220.220";;
			*)doh=$(echo $dns | sed -e 's/，/,/g' -e 's/。/./g' -e 's/：/:/g');dns=$(echo $doh | sed 's/,/\n/g' | awk -F[/:] '{print$4}' | grep -E "^[0-9]{1,3}\.[0-9]{1,3}\.[0-9]{1,3}\.[0-9]{1,3}$");[ ! "$dns" ] && dns="1.1.1.1 1.0.0.1";;
		esac
		for i in $dns;do
			case $run_mode in
				gfw|oversea)ipset add blacklist $i 2>/dev/null;;
				*)ipset del over_wan_ac $i 2>/dev/null || ipset add over_wan_ac $i nomatch 2>/dev/null;;
			esac
		done
		[ "$dns" = "162.159.36.1 162.159.46.1 1.1.1.1 1.0.0.1" ] && dns="1.1.1.1 1.0.0.1"
	else
		case $dns in
			1)dns="1.1.1.1,1.0.0.1";;
			2)dns="8.8.8.8,8.8.4.4";;
			3)dns="9.9.9.9,149.112.112.112";;
			4)dns="9.9.9.11,149.112.112.11";;
			5)dns="208.67.222.222,208.67.220.220";;
		esac
		dns=$(echo $dns | sed -e 's/，/,/g' -e 's/。/./g' -e 's/：/:/g' -e 's/,/\n/g')
		if ! dns_tmp=$(echo $dns | grep -Eo "[0-9]+\.[0-9]+\.[0-9]+\.[0-9]+" | grep -v 0.0.0.0 | grep -v 127.0.0.1);then
			log "SmartDNS      : Get Foreign DNS failed!"
			return 1
		fi
		for i in $dns_tmp;do
			case $run_mode in
				gfw|oversea)ipset add blacklist $i 2>/dev/null;;
				*)ipset del over_wan_ac $i 2>/dev/null || ipset add over_wan_ac $i nomatch 2>/dev/null;;
			esac
		done
	fi

	if [ "$YB" -a $dns_mode_y = 0 ];then
		case $dns_yb in
			1)doh_yb="https://162.159.36.1/dns-query -tls-host-verify cloudflare-dns.com -http-host cloudflare-dns.com,https://162.159.46.1/dns-query -tls-host-verify cloudflare-dns.com -http-host cloudflare-dns.com";dns_yb="162.159.36.1 162.159.46.1";;
			2)doh_yb="https://8.8.8.8/dns-query -tls-host-verify dns.google -http-host dns.google,https://8.8.4.4/dns-query -tls-host-verify dns.google -http-host dns.google";dns_yb="8.8.8.8 8.8.4.4";;
			3)doh_yb="https://9.9.9.9/dns-query -tls-host-verify *.quad9.net -http-host dns.quad9.net,https://149.112.112.112/dns-query -tls-host-verify *.quad9.net -http-host dns.quad9.net";dns_yb="9.9.9.9 149.112.112.112";;
			4)doh_yb="https://9.9.9.11/dns-query -tls-host-verify *.quad9.net -http-host dns11.quad9.net,https://149.112.112.11/dns-query -tls-host-verify *.quad9.net -http-host dns11.quad9.net";dns_yb="9.9.9.11 149.112.112.11";;
			5)doh_yb="https://146.112.41.2/dns-query -tls-host-verify doh.opendns.com -http-host doh.opendns.com";dns_yb="9.9.9.11 149.112.112.11";;
			*)doh_yb=$(echo $dns_yb | sed -e 's/，/,/g' -e 's/。/./g' -e 's/：/:/g');dns_yb=$(echo $doh_yb | sed 's/,/\n/g' | awk -F[/:] '{print$4}' | grep -E "^[0-9]{1,3}\.[0-9]{1,3}\.[0-9]{1,3}\.[0-9]{1,3}$");[ ! "$dns_yb" ] && dns_yb="8.8.8.8 8.8.4.4";;
		esac
		for i in $dns_yb;do ipset add youtube $i 2>/dev/null;done
	elif [ "$YB" -a $dns_mode_y = 1 ];then
		case $dns_yb in
			1)dns_yb="1.1.1.1,1.0.0.1";;
			2)dns_yb="8.8.8.8,8.8.4.4";;
			3)dns_yb="9.9.9.9,149.112.112.112";;
			4)dns_yb="9.9.9.11,149.112.112.11";;
			5)dns_yb="208.67.222.222,208.67.220.220";;
		esac
		dns_yb=$(echo $dns_yb | sed -e 's/，/,/g' -e 's/。/./g' -e 's/：/:/g' -e 's/,/\n/g')
		if ! dns_tmp=$(echo $dns_yb | grep -Eo "[0-9]+\.[0-9]+\.[0-9]+\.[0-9]+" | grep -v 0.0.0.0 | grep -v 127.0.0.1);then
			log "SmartDNS      : Get Youtube DNS failed!"
			return 1
		fi
		for i in $dns_tmp;do ipset add youtube $i 2>/dev/null;done
	fi

	if [ "$NF" -a $dns_mode_n = 0 ];then
		case $dns_nf in
			1)doh_nf="https://162.159.36.1/dns-query -tls-host-verify cloudflare-dns.com -http-host cloudflare-dns.com,https://162.159.46.1/dns-query -tls-host-verify cloudflare-dns.com -http-host cloudflare-dns.com";dns_nf="162.159.36.1 162.159.46.1";;
			2)doh_nf="https://8.8.8.8/dns-query -tls-host-verify dns.google -http-host dns.google,https://8.8.4.4/dns-query -tls-host-verify dns.google -http-host dns.google";dns_nf="8.8.8.8 8.8.4.4";;
			3)doh_nf="https://9.9.9.9/dns-query -tls-host-verify *.quad9.net -http-host dns.quad9.net,https://149.112.112.112/dns-query -tls-host-verify *.quad9.net -http-host dns.quad9.net";dns_nf="9.9.9.9 149.112.112.112";;
			4)doh_nf="https://9.9.9.11/dns-query -tls-host-verify *.quad9.net -http-host dns11.quad9.net,https://149.112.112.11/dns-query -tls-host-verify *.quad9.net -http-host dns11.quad9.net";dns_nf="9.9.9.11 149.112.112.11";;
			5)doh_nf="https://146.112.41.2/dns-query -tls-host-verify doh.opendns.com -http-host doh.opendns.com";dns_nf="9.9.9.11 149.112.112.11";;
			*)doh_nf=$(echo $dns_nf | sed -e 's/，/,/g' -e 's/。/./g' -e 's/：/:/g');dns_nf=$(echo $doh_nf | sed 's/,/\n/g' | awk -F[/:] '{print$4}' | grep -E "^[0-9]{1,3}\.[0-9]{1,3}\.[0-9]{1,3}\.[0-9]{1,3}$");[ ! "$dns_nf" ] && dns_nf="9.9.9.9 149.112.112.112";;
		esac
		for i in $dns_nf;do ipset add netflix $i 2>/dev/null;done
	elif [ "$NF" -a $dns_mode_n = 1 ];then
		case $dns_nf in
			1)dns_nf="1.1.1.1,1.0.0.1";;
			2)dns_nf="8.8.8.8,8.8.4.4";;
			3)dns_nf="9.9.9.9,149.112.112.112";;
			4)dns_nf="9.9.9.11,149.112.112.11";;
			5)dns_nf="208.67.222.222,208.67.220.220";;
		esac
		dns_nf=$(echo $dns_nf | sed -e 's/，/,/g' -e 's/。/./g' -e 's/：/:/g' -e 's/,/\n/g')
		if ! dns_tmp=$(echo $dns_nf | grep -Eo "[0-9]+\.[0-9]+\.[0-9]+\.[0-9]+" | grep -v 0.0.0.0 | grep -v 127.0.0.1);then
			log "SmartDNS      : Get Netflix DNS failed!"
			return 1
		fi
		for i in $dns_tmp;do ipset add netflix $i 2>/dev/null;done
	fi

	if [ "$CU" -a $dns_mode_c = 0 ];then
		case $dns_cu in
			1)doh_cu="https://162.159.36.1/dns-query -tls-host-verify cloudflare-dns.com -http-host cloudflare-dns.com,https://162.159.46.1/dns-query -tls-host-verify cloudflare-dns.com -http-host cloudflare-dns.com";dns_cu="162.159.36.1 162.159.46.1";;
			2)doh_cu="https://8.8.8.8/dns-query -tls-host-verify dns.google -http-host dns.google,https://8.8.4.4/dns-query -tls-host-verify dns.google -http-host dns.google";dns_cu="8.8.8.8 8.8.4.4";;
			3)doh_cu="https://9.9.9.9/dns-query -tls-host-verify *.quad9.net -http-host dns.quad9.net,https://149.112.112.112/dns-query -tls-host-verify *.quad9.net -http-host dns.quad9.net";dns_cu="9.9.9.9 149.112.112.112";;
			4)doh_cu="https://9.9.9.11/dns-query -tls-host-verify *.quad9.net -http-host dns11.quad9.net,https://149.112.112.11/dns-query -tls-host-verify *.quad9.net -http-host dns11.quad9.net";dns_cu="9.9.9.11 149.112.112.11";;
			5)doh_cu="https://146.112.41.2/dns-query -tls-host-verify doh.opendns.com -http-host doh.opendns.com";dns_cu="9.9.9.11 149.112.112.11";;
			*)doh_cu=$(echo $dns_cu | sed -e 's/，/,/g' -e 's/。/./g' -e 's/：/:/g');dns_cu=$(echo $doh_cu | sed 's/,/\n/g' | awk -F[/:] '{print$4}' | grep -E "^[0-9]{1,3}\.[0-9]{1,3}\.[0-9]{1,3}\.[0-9]{1,3}$");[ ! "$dns_cu" ] && dns_cu="9.9.9.11 149.112.112.11";;
		esac
		for i in $dns_cu;do ipset add custom $i 2>/dev/null;done
	elif [ "$CU" -a $dns_mode_c = 1 ];then
		case $dns_cu in
			1)dns_cu="1.1.1.1,1.0.0.1";;
			2)dns_cu="8.8.8.8,8.8.4.4";;
			3)dns_cu="9.9.9.9,149.112.112.112";;
			4)dns_cu="9.9.9.11,149.112.112.11";;
			5)dns_cu="208.67.222.222,208.67.220.220";;
		esac
		dns_cu=$(echo $dns_cu | sed -e 's/，/,/g' -e 's/。/./g' -e 's/：/:/g' -e 's/,/\n/g')
		if ! dns_tmp=$(echo $dns_cu | grep -Eo "[0-9]+\.[0-9]+\.[0-9]+\.[0-9]+" | grep -v 0.0.0.0 | grep -v 127.0.0.1);then
			log "SmartDNS      : Get Custom DNS failed!"
			return 1
		fi
		for i in $dns_tmp;do ipset add custom $i 2>/dev/null;done
	fi

	if [ $dns_mode_l = 0 ];then
		dns_l=$(uci_get_by_type global dns_l 0)
		case $dns_l in
			0)doh_l="https://223.5.5.5/dns-query -tls-host-verify *.alidns.com -http-host dns.alidns.com,https://223.6.6.6/dns-query -tls-host-verify *.alidns.com -http-host dns.alidns.com,https://[2400:3200::1]/dns-query -tls-host-verify *.alidns.com -http-host dns.alidns.com,https://[2400:3200:baba::1]/dns-query -tls-host-verify *.alidns.com -http-host dns.alidns.com";dns_l="223.5.5.5 223.6.6.6 2400:3200::1 2400:3200:baba::1";;
			1)doh_l="https://162.14.21.56/dns-query -tls-host-verify *.doh.pub -host-name doh.pub -http-host doh.pub,https://162.14.21.178/dns-query -tls-host-verify *.doh.pub -host-name doh.pub -http-host doh.pub";dns_l="162.14.21.56 162.14.21.178";;
			*)doh_l=$(echo $dns_l | sed -e 's/，/,/g' -e 's/。/./g' -e 's/：/:/g' -e 's/,/\n/g');dns_l=$(echo "$doh_l" | grep -E "^[0-9]{1,3}\.[0-9]{1,3}\.[0-9]{1,3}\.[0-9]{1,3}$");[ ! "$dns_l" ] && dns_l="223.5.5.5 223.6.6.6 2400:3200::1 2400:3200:baba::1" && dns_d=1;;
		esac
		[ $(uci_get_by_type global isp_dns 0) = 1 ] && dns_l=isp
	else
		dns_l=$(uci_get_by_type global udp_dns isp)
		[ ! "$dns_l" ] && log "SmartDNS      : Get Domestic DNS failed!" && return 1
	fi
	if [ "$dns_l" = isp ];then
		dns_l=$REF
		[ ! "$dns_l" ] && log "SmartDNS      : Get Domestic DNS failed!" && return 1
	fi
	dns_l=$(echo $dns_l | sed -e 's/，/,/g' -e 's/。/./g' -e 's/：/:/g' -e 's/,/\n/g')
	dns_tmp=$(echo $dns_l | grep -Eo "[0-9]+\.[0-9]+\.[0-9]+\.[0-9]+" | grep -v 0.0.0.0 | grep -v 127.0.0.1)
	for i in $dns_tmp;do ipset add over_wan_ac $i 2>/dev/null;done

	smartdns_flag=1
	mkdir -p /tmp/dnsmasq.d $SDNS $DNS_DIR
	cat > $DNS_T <<EOF
force-AAAA-SOA yes
speed-check-mode none
cache-persist no
cache-size 0
log-level fatal
log-file $LOG
bind :5335 -group a
bind :5336 -group i -no-rule-soa
EOF
	if [ $dns_mode = 0 ];then
		echo $doh | sed 's/,/\n/g' | sed -e 's/^/server-https /g' -e 's/$/ -group a -exclude-default-group/g' >> $DNS_T
		for i in $dns;do echo "server-tcp $i -group b -exclude-default-group" >> $DNS_T;done
		echo -e "nameserver /dnsleaktest.com/b\nnameserver /whrq.net/b\nnameserver /speedtest.net/b\nnameserver /ooklaserver.net/b" >> $DNS_T
		doh_t=$(echo $doh | sed 's/,/\n/g' | awk -F[/:] '{print$4}' | grep -Ev "^[0-9]{1,3}\.[0-9]{1,3}\.[0-9]{1,3}\.[0-9]{1,3}$")
		if [ "$doh_t" ];then
			for i in $doh_t;do
				case $run_mode in
					router|all)echo "nameserver /$i/b" >> $DNS_T;;
					*)echo "domain-rules /$i/ -nameserver b -ipset blacklist" >> $DNS_T;;
				esac
			done
		fi
	else
		for i in $dns;do echo "server-tcp $i -group a -exclude-default-group" >> $DNS_T;done
		echo -e "nameserver /dnsleaktest.com/a\nnameserver /whrq.net/a\nnameserver /speedtest.net/a\nnameserver /ooklaserver.net/a" >> $DNS_T
	fi

	if [ "$YB" ];then
		if [ $dns_mode_y = 0 ];then
			echo $doh_yb | sed 's/,/\n/g' | sed -e 's/^/server-https /g' -e 's/$/ -group c -exclude-default-group/g' >> $DNS_T
			doh_yb_t=$(echo $doh_yb | sed 's/,/\n/g' | awk -F[/:] '{print$4}' | grep -Ev "^[0-9]{1,3}\.[0-9]{1,3}\.[0-9]{1,3}\.[0-9]{1,3}$")
			if [ "$doh_yb_t" ];then
				for i in $dns_yb;do echo "server-tcp $i -group d -exclude-default-group" >> $DNS_T;done
				for i in $doh_yb_t;do echo "domain-rules /$i/ -nameserver d -ipset youtube" >> $DNS_T;done
			fi
		else
			for i in $dns_yb;do echo "server-tcp $i -group c -exclude-default-group" >> $DNS_T;done
		fi
	fi

	if [ "$NF" ];then
		if [ $dns_mode_n = 0 ];then
			echo $doh_nf | sed 's/,/\n/g' | sed -e 's/^/server-https /g' -e 's/$/ -group e -exclude-default-group/g' >> $DNS_T
			doh_nf_t=$(echo $doh_nf | sed 's/,/\n/g' | awk -F[/:] '{print$4}' | grep -Ev "^[0-9]{1,3}\.[0-9]{1,3}\.[0-9]{1,3}\.[0-9]{1,3}$")
			if [ "$doh_nf_t" ];then
				for i in $dns_nf;do echo "server-tcp $i -group f -exclude-default-group" >> $DNS_T;done
				for i in $doh_nf_t;do echo "domain-rules /$i/ -nameserver f -ipset netflix" >> $DNS_T;done
			fi
		else
			for i in $dns_nf;do echo "server-tcp $i -group e -exclude-default-group" >> $DNS_T;done
		fi
	fi

	if [ "$CU" ];then
		if [ $dns_mode_c = 0 ];then
			echo $doh_cu | sed 's/,/\n/g' | sed -e 's/^/server-https /g' -e 's/$/ -group g -exclude-default-group/g' >> $DNS_T
			doh_cu_t=$(echo $doh_cu | sed 's/,/\n/g' | awk -F[/:] '{print$4}' | grep -Ev "^[0-9]{1,3}\.[0-9]{1,3}\.[0-9]{1,3}\.[0-9]{1,3}$")
			if [ "$doh_cu_t" ];then
				for i in $dns_cu;do echo "server-tcp $i -group h -exclude-default-group" >> $DNS_T;done
				for i in $doh_cu_t;do echo "domain-rules /$i/ -nameserver h -ipset custom" >> $DNS_T;done
			fi
		else
			for i in $dns_cu;do echo "server-tcp $i -group g -exclude-default-group" >> $DNS_T;done
		fi
	fi

	if [ $dns_mode_l = 0 ];then
		echo $doh_l | sed 's/,/\n/g' | sed -e 's/^/server-https /g' -e 's/$/ -group i -exclude-default-group/g' >> $DNS_T
		for i in $dns_l;do echo "server $i -group j -exclude-default-group" >> $DNS_T;done
		doh_l_t=$(echo $doh_l | sed 's/,/\n/g' | awk -F[/:] '{print$4}' | grep -v '\[' | grep -Ev "^[0-9]{1,3}\.[0-9]{1,3}\.[0-9]{1,3}\.[0-9]{1,3}$")
		[ "$doh_l_t" ] && for i in $doh_l_t;do echo "domain-rules /$i/ -nameserver j -ipset over_wan_ac" >> $DNS_T;done
		echo "nameserver /in-addr.arpa/j" >> $DNS_T
	else
		for i in $dns_l;do echo "server $i -group i -exclude-default-group" >> $DNS_T;done
		echo "nameserver /in-addr.arpa/i" >> $DNS_T
	fi

	case $run_mode in
		all)port=5335;;
		gfw|oversea)port=5336;;
		*)port=5337;;
	esac
	cat > $DNS_FILE <<EOF
no-resolv
server=127.0.0.1#$port
EOF
	if [ $run_mode = oversea ];then
		awk '!/^$/&&!/^#/{printf("server=/%s/'"127.0.0.1#5335"'\n",$0)}' $T_FILE/oversea.list > $DNS_DIR/oversea.conf
		[ "$doh_t" ] && for i in $doh_t;do echo "server=/$i/127.0.0.1#5335" >> $DNS_DIR/oversea.conf;done
	else
		[ $run_mode != gfw ] && echo -e "server=/msftconnecttest.com/127.0.0.1#5336\nserver=/msftncsi.com/127.0.0.1#5336" >> $DNS_FILE
		if [ $run_mode != all ];then
			cp -f $T_FILE/black.list $O
			awk '!/^$/&&!/^#/{printf("server=/%s/'"127.0.0.1#5335"'\n",$0)}' $O > $DNS_DIR/black.conf
			if [ $run_mode = gfw ];then
				[ "$doh_t" ] && for i in $doh_t;do echo "server=/$i/127.0.0.1#5335" >> $DNS_DIR/black.conf;done
				cp -f $K/gfw.list $O
				awk '!/^$/&&!/^#/{printf("server=/%s/'"127.0.0.1#5335"'\n",$0)}' $O >> $DNS_DIR/black.conf
			fi
		fi

		if [ -s $DNS_DIR/black.conf ];then
			[ "$doh_yb_t" ] && for i in $doh_yb_t;do sed -i -e "/\/$i/d" -e "/\.$i/d" $DNS_DIR/black.conf;done
			[ "$doh_nf_t" ] && for i in $doh_nf_t;do sed -i -e "/\/$i/d" -e "/\.$i/d" $DNS_DIR/black.conf;done
			[ "$doh_cu_t" ] && for i in $doh_cu_t;do sed -i -e "/\/$i/d" -e "/\.$i/d" $DNS_DIR/black.conf;done
			echo "`sort -u $DNS_DIR/black.conf`" > $DNS_DIR/black.conf
			sed -e 's/.*=/ipset /g' -e 's/127.0.0.1#5335/blacklist/g' $DNS_DIR/black.conf > $CON_T
		else
			rm -f $DNS_DIR/black.conf
		fi

		if [ "$YB" -o "$YB_GL" ];then
			cp -f $T_FILE/youtube.list $O
			[ $NF_YB ] && (echo >> $O;cat $T_FILE/netflix.list >> $O)
			[ $CU_YB ] && (echo >> $O;cat $T_FILE/custom.list >> $O)
			if [ $YB_GL ];then
				n=a;N=blacklist
			else
				n=c;N=youtube
			fi
			for i in $(cat $O);do
				sed -i -e "/\/$i\//d" -e "/\.$i\//d" $DNS_DIR/black.conf 2>/dev/null
				sed -i -e "/\/$i\//d" -e "/\.$i\//d" $CON_T 2>/dev/null
				echo "domain-rules /$i/ -nameserver $n -ipset $N" >> $CON_T
			done
			if [ $run_mode = gfw ];then
				awk '!/^$/&&!/^#/{printf("server=/%s/'"127.0.0.1#5335"'\n",$0)}' $O >> $DNS_DIR/black.conf
				[ "$doh_yb_t" ] && for i in $doh_yb_t;do echo "server=/$i/127.0.0.1#5335" >> $DNS_DIR/black.conf;done
			fi
		fi

		if [ "$NF" -o "$NF_GL" ];then
			cp -f $T_FILE/netflix.list $O
			[ $CU_NF ] && (echo >> $O;cat $T_FILE/custom.list >> $O)
			if [ $NF_GL ];then
				n=a;N=blacklist
			else
				n=e;N=netflix
			fi
			for i in $(cat $O);do
				sed -i -e "/\/$i\//d" -e "/\.$i\//d" $DNS_DIR/black.conf 2>/dev/null
				sed -i -e "/\/$i\//d" -e "/\.$i\//d" $CON_T 2>/dev/null
				echo "domain-rules /$i/ -nameserver $n -ipset $N" >> $CON_T
			done
			if [ $run_mode = gfw ];then
				awk '!/^$/&&!/^#/{printf("server=/%s/'"127.0.0.1#5335"'\n",$0)}' $O >> $DNS_DIR/black.conf
				[ "$doh_nf_t" ] && for i in $doh_nf_t;do echo "server=/$i/127.0.0.1#5335" >> $DNS_DIR/black.conf;done
			fi
		fi

		if [ "$CU" -o "$CU_GL" ];then
			cp -f $T_FILE/custom.list $O
			if [ $CU_GL ];then
				n=a;N=blacklist
			else
				n=g;N=custom
			fi
			for i in $(cat $O);do
				sed -i -e "/\/$i\//d" -e "/\.$i\//d" $DNS_DIR/black.conf 2>/dev/null
				sed -i -e "/\/$i\//d" -e "/\.$i\//d" $CON_T 2>/dev/null
				echo "domain-rules /$i/ -nameserver $n -ipset $N" >> $CON_T
			done
			if [ $run_mode = gfw ];then
				awk '!/^$/&&!/^#/{printf("server=/%s/'"127.0.0.1#5335"'\n",$0)}' $O >> $DNS_DIR/black.conf
				[ "$doh_cu_t" ] && for i in $doh_cu_t;do echo "server=/$i/127.0.0.1#5335" >> $DNS_DIR/black.conf;done
			fi
		fi

		[ $run_mode = all -a "$doh_l_t" ] && for i in $doh_l_t;do echo "server=/$i/127.0.0.1#5336" > $DNS_DIR/white.conf;done
		if [ -s $T_FILE/white.list ];then
			cp -f $T_FILE/white.list $O
			for i in $(cat $O);do
				sed -i -e "/\/$i\//d" -e "/\.$i\//d" $DNS_DIR/black.conf 2>/dev/null
				sed -i -e "/\/$i\//d" -e "/\.$i\//d" $CON_T 2>/dev/null
			done
			awk '!/^$/&&!/^#/{printf("server=/%s/'"127.0.0.1#5336"'\n",$0)}' $O >> $DNS_DIR/white.conf
			awk '!/^$/&&!/^#/{printf("ipset /%s/'"over_wan_ac"'\n",$0)}' $O >> $CON_T
		fi
	fi
	[ -s $CON_T ] && echo "conf-file $CON_T" >> $DNS_T
	rm -f $O
	[ $(find $DNS_DIR -name \* -exec cat {} \; 2>/dev/null | wc -l) = 0 ] && rm -rf $DNS_DIR || echo conf-dir=$DNS_DIR >> $DNS_FILE
	[ $run_mode = router ] && chinadns_flag=1
	killall -q -9 smartdns
	start_dns
	/etc/init.d/dnsmasq restart >/dev/null 2>&1
	if [ $TG_SERVER ];then
		tg=1
	elif [ "$TG_GL" -a run_mode = gfw ];then
		tg=2
	elif [ "$TG_YB" ];then
		tg=3
	elif [ "$TG_NF" ];then
		tg=4
	elif [ "$TG_CU" ];then
		tg=5
	fi
	service_start $BIN_DIR/preload $run_mode ${Z:=0} ${tg:=0} $doh_t $doh_yb_t $doh_nf_t $doh_l_t
}

start_switch(){
	if [ $(uci_get_by_type global enable_switch 0) = 1 -a $(uci_get_by_name $GLOBAL_SERVER switch_enable 0) = 1 -a ! $switch_server ];then
		service_start $BIN_DIR/switch start
		switch_enable=1
	fi
}

c_cron(){
	grep -q $BIN_DIR/$1 $CRON_FILE && sed -i "/\/share\/overwall\/$1/d" $CRON_FILE
}

add_cron(){
	if ! grep -q $LOG $CRON_FILE;then
		echo "0 1 * * * rm -f $LOG" >> $CRON_FILE;A=1
	fi
	if [ $(uci_get_by_type server_subscribe auto_update 0) = 1 ];then
		B=1
		if ! grep -wq "$(uci_get_by_type server_subscribe auto_update_time 6) \* \* \* $BIN_DIR/update" $CRON_FILE;then
			c_cron update
			echo "0 $(uci_get_by_type server_subscribe auto_update_time 6) * * * $BIN_DIR/update" >> $CRON_FILE;A=1
		fi
	else
		c_cron update && A=1
	fi
	if [ $(uci_get_by_type server_subscribe auto_update_s 0) = 1 ];then
		B=1
		if ! grep -wq "$(uci_get_by_type server_subscribe auto_update_time 6) \* \* \* $BIN_DIR/subscribe" $CRON_FILE;then
			c_cron subscribe
			echo "5 $(uci_get_by_type server_subscribe auto_update_time 6) * * * $BIN_DIR/subscribe" >> $CRON_FILE;A=1
		fi
	else
		c_cron subscribe && A=1
	fi
	[ "$B" != 1 ] && c_cron && A=1
	[ "$A" = 1 ] && /etc/init.d/cron restart
}

start_local(){
	type=$(uci_get_by_name $SO_SERVER type)
	[ $type = ss -o $type = ssr ] && cmd=$(f_bin $type-local) || cmd=$(f_bin $type)
	[ ! $cmd ] && log "Socks5 Node : Can't find $(echo $type | tr a-z A-Z) program, start failed!" && return 1
	socks5_port=$(uci_get_by_type socks5_proxy local_port 1080)
	gen_config_file $SO_SERVER 6
	local_enable=1
	case $type in
		ss|ssr)
			$cmd -c $CONFIG_SOCK5_FILE -u >/dev/null 2>&1 &
			[ $type = ss ] && name=Shadowsocks || name=ShadowsocksR
			log "Socks5 Node : $name Started!";;
		vmess|vless)
			$BIN_DIR/genxrayconfig $SO_SERVER tcp 0 $socks5_port $socks5_ip > $CONFIG_SOCK5_FILE
			sed -i 's/\\//g' $CONFIG_SOCK5_FILE
			$cmd -c $CONFIG_SOCK5_FILE >/dev/null 2>&1 &
			log "Socks5 Node : $($cmd -version | head -1 | awk '{print$1,$2}') Started!";;
		trojan)
			$BIN_DIR/gentrojanconfig $SO_SERVER client $socks5_port $socks5_ip > $CONFIG_SOCK5_FILE
			sed -i 's/\\//g' $CONFIG_SOCK5_FILE
			$cmd -c $CONFIG_SOCK5_FILE >/dev/null 2>&1 &
			log "Socks5 Node : Trojan(Ver $($cmd --version 2>&1 | head -1 | awk '{print$3}')) Started!";;
		naiveproxy)
			$cmd $CONFIG_SOCK5_FILE >/dev/null 2>&1 &
			log "Socks5 Node : $($cmd --version | head -1) Started!";;
	esac
	ipset add over_wan_ac $socks5_ip 2>/dev/null
}

gen_service_file(){
	[ $(uci_get_by_name $1 fast_open 0) = 1 ] && fast=true || fast=false
	if [ $2 = ss ];then
		cat >$3 <<EOF
{
"server":"0.0.0.0",
"server_port":$port,
"password":"$pass",
"timeout":$timeout,
"method":"$(uci_get_by_name $1 encrypt_method_ss)",
"fast_open":$fast
}
EOF
		plugin=$(uci_get_by_name $1 plugin)
		if which $plugin >/dev/null 2>&1;then
			sed -i "s@0.0.0.0\",@0.0.0.0\",\n\"plugin\":\"$plugin\",\n\"plugin_opts\":\"$(uci_get_by_name $1 plugin_opts)\",@" $3
		fi
	else
		cat >$3 <<EOF
{
"server":"0.0.0.0",
"server_port":$port,
"password":"$pass",
"timeout":$timeout,
"method":"$(uci_get_by_name $1 encrypt_method)",
"protocol":"$(uci_get_by_name $1 protocol)",
"protocol_param":"$(uci_get_by_name $1 protocol_param)",
"obfs":"$(uci_get_by_name $1 obfs)",
"obfs_param":"$(uci_get_by_name $1 obfs_param)",
"fast_open":$fast
}
EOF
	fi
}

run_server(){
	[ $(uci_get_by_name $1 enable 0) = 0 ] && return 1
	let server_count=server_count+1
	[ $server_count = 1 ] && iptables-save -t filter | grep -q OVERWALL-S-RULE || iptables -N OVERWALL-S-RULE && iptables -I INPUT -j OVERWALL-S-RULE
	type=$(uci_get_by_name $1 type ssr)
	[ $type = ss -o $type = ssr ] && cmd=$(f_bin $type-server) || cmd=$(which microsocks)
	[ ! $cmd ] && log "Over server    : Can't find $cmd program, start failed!" && return 1
	port=$(uci_get_by_name $1 server_port)
	pass=$(uci_get_by_name $1 password)
	name=overwall-server_$server_count
	case $type in
		ss|ssr)timeout=$(uci_get_by_name $1 timeout 60);gen_service_file $1 $type /var/etc/$name.json
			$cmd -c /var/etc/$name.json -u >/dev/null 2>&1 &
			[ $type = ss ] && name=Shadowsocks || name=ShadowsocksR
			log "Over server    : $name Server$server_count Started!";;
		*)
		if [ $(uci_get_by_name $1 auth_enable 0) = 1 ];then
			username=$(uci_get_by_name $1 username)
			if [ "$username" ];then
				param="$([ $(uci_get_by_name $1 auth_once 0) = 1 ] && echo -1) -u $username -P $pass"
			else
				log "Over server    : Socks5 User and pass must be used together!"
				return 1
			fi
		fi
		$cmd -p $port $param $name >/dev/null 2>&1 &
		log "Over server    : Socks5 Server$server_count Started!";;
	esac
	iptables -A OVERWALL-S-RULE -p tcp --dport $port -j ACCEPT
	iptables -A OVERWALL-S-RULE -p udp --dport $port -j ACCEPT
}

gen_serv_include(){
	[ -s $FWI ] || echo '#!/bin/sh' > $FWI
	extract_rules(){
		echo "*filter"
		iptables-save -t filter | grep OVERWALL-S-RULE | sed -e "s/^-A INPUT/-I INPUT/"
		echo 'COMMIT'
	}
	cat >> $FWI <<EOF
iptables-save -c | grep -v OVERWALL-S-RULE | iptables-restore -c
iptables-restore -n <<-EOT
$(extract_rules)
EOT
EOF
}

start_server(){
	[ $(uci_get_by_type server_global enable_server 0) = 0 ] && return
	mkdir -p /var/etc
	config_load $NAME
	config_foreach run_server server_config
	gen_serv_include
}

start_monitor(){
	if [ $(uci_get_by_type global monitor_enable 0) = 1 ];then
		let total=redir_tcp+kcp_enable+redir_udp+redir_yb+redir_nf+redir_cu+redir_tg+smartdns_flag+chinadns_flag+local_enable+server_count+switch_enable
		[ $total -gt 0 ] && service_start $BIN_DIR/monitor $redir_tcp $kcp_enable $redir_udp $redir_yb $redir_nf $redir_cu $redir_tg $smartdns_flag $chinadns_flag $local_enable $server_count
	fi
}

start(){
	touch $LOC
	if [ $switch_server ];then
		GLOBAL_SERVER=$switch_server
		switch_enable=1
	fi
	if rules;then
		if start_tcp;then
			[ "$UDP" ] && start_udp
			[ "$YB" ] && start_yb
			[ "$NF" ] && start_nf
			[ "$CU" ] && start_cu
			[ "$TG" ] && start_tg
			gen_dns
			start_switch
			add_cron
		fi
	fi
	[ "$SO_SERVER" -a "$socks5_start" != 1 ] && start_local
	start_server
	start_monitor
	rm -f $LOCK $LOC
}

stop(){
	kill -9 $(ps -w | grep $BIN_DIR/rules | grep -v grep | awk '{print$1}') 2>/dev/null
	kill -9 $(ps -w | grep gfw.b64 | grep -v grep | awk '{print$1}') 2>/dev/null
	kill -9 $(ps -w | grep $BIN_DIR/checknetwork | grep -v grep | awk '{print$1}') 2>/dev/null
	kill -9 $(ps -w | grep $BIN_DIR/update | grep -v grep | awk '{print$1}') 2>/dev/null
	[ $switch_server ] || kill -9 $(ps -w | grep $BIN_DIR/switch | grep -v grep | awk '{print$1}') 2>/dev/null
	kill -9 $(ps -w | grep $BIN_DIR/monitor | grep -v grep | awk '{print$1}') 2>/dev/null
	kill -9 $(ps -w | grep $BIN_DIR/preload | grep -v grep | awk '{print$1}') 2>/dev/null
	kill -9 $(ps -w | grep $VAR | grep -v grep | awk '{print$1}') 2>/dev/null
	killall -q -9 smartdns chinadns-ng kcptun-client xray-plugin microsocks
	$BIN_DIR/rules -f
	[ $(iptables -nL | grep OVERWALL-S-RULE | wc -l) = 0 ] || (iptables -F OVERWALL-S-RULE && iptables -X OVERWALL-S-RULE;while iptables -D INPUT -j OVERWALL-S-RULE 2>/dev/null;do :;done)
	rm -rf $DNS_DIR $VAR*.json $DNS_FILE $CON_T /var/lock/overwall-update.lock $LOC_UCI
	[ $run_mode = gfw -o $gfw_mode = 1 ] || rm -f $K/gfw.list
	[ $run_mode = router ] || rm -f $K/china_v6.txt
	[ ! $GLOBAL_SERVER ] && grep -q overwall $CRON_FILE && sed -i '/overwall/d' $CRON_FILE && /etc/init.d/cron restart
	if [ ! "$R" -o ! $GLOBAL_SERVER ];then
		rm -rf $K $SDNS $PID $LOC
		/etc/init.d/dnsmasq restart >/dev/null 2>&1
	elif [ -s $DNS_T ];then
		cat > $DNS_T <<EOF
speed-check-mode none
cache-persist no
cache-size 0
log-level fatal
log-file $LOG
bind :5335
bind :5336
bind :5337
$([ $dns_mode_l = 0 ] && echo 223.5.5.5 223.6.6.6 | sed 's/ /\n/g' | sed 's/^/server /g' || echo $REF | sed 's/ /\n/g' | sed 's/^/server /g')
EOF
		$(which smartdns) -c $DNS_T
		r=1
		while ! ps -w | grep smartdns | grep -qv grep;do
			[ $r -ge 10 ] && return 1 || let r++
			sleep 1
		done
	fi
}

restart(){
	if [ -f $LOC -o -f $LOC_UCI ];then
		rm -f $LOC_UCI;exit
	fi
	touch $LOC
	R=1
	stop
	start
}

boot(){
	echo '#!/bin/sh' > $FWI
	touch $LOCK
	start
}
