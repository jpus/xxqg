<%+cbi/valueheader%>
<script type="text/javascript">//<![CDATA[
function padright(str,cnt,pad){
	return str+Array(cnt+1).join(pad);
}

function b64EncodeUnicode(str){
	return btoa(encodeURIComponent(str).replace(/%([0-9A-F]{2})/g,function(match,p1){
		return String.fromCharCode('0x'+p1);
	}));
}

function b64encutf8safe(str){
	return b64EncodeUnicode(str).replace(/\+/g,"-").replace(/\//g,"_").replace(/=+$/g,'');
}

function b64DecodeUnicode(str){
	return decodeURIComponent(Array.prototype.map.call(atob(str),function(c){
		return '%'+('00'+c.charCodeAt(0).toString(16)).slice(-2);
	}).join(''));
}

function b64decutf8safe(str){
	var l;
	str=str.replace(/-/g,"+").replace(/_/g,"/");
	l=str.length;
	l=(4 - l % 4) % 4;
	if (l) str=padright(str,l,"=");
	return b64DecodeUnicode(str);
}

function b64encsafe(str){
	return btoa(str).replace(/\+/g,"-").replace(/\//g,"_").replace(/=+$/g,'')
}

function b64decsafe(str){
	var l;
	str=str.replace(/-/g,"+").replace(/_/g,"/");
	l=str.length;
	l=(4 - l % 4) % 4;
	if (l) str=padright(str,l,"=");
	return atob(str);
}

function dictvalue(d,key){
	var v=d[key];
	if (typeof(v)=='undefined' || v=='') return '';
	return b64decsafe(v);
}

function parseNodeUrl(url){
	var m=url.match(/^(([^:\/?#]+:)?(?:\/\/((?:([^\/?#:]*)([^\/?#:]*)@)?([^\/?#:]*)(?::([^\/?#:]*))?)))?([^?#]*)(\?[^#]*)?(#.*)?$/),
		r={
			hash:m[10] || '',// #asd
			host:m[3] || '',// localhost:257
			hostname:m[6] || '',// localhost
			href:m[0] || '',// http://username:password@localhost:257/deploy/?asd=asd#asd
			origin:m[1] || '',// http://username:password@localhost:257
			pathname:m[8] || (m[1] ? '/':''),// /deploy/
			port:m[7] || '',// 257
			protocol:m[2] || '',// http:
			search:m[9] || '',// ?asd=asd
			passwd:m[4] || '',// username
			removed:m[5] || '' // password
		};
	if (r.protocol.length==2){
		r.protocol="file:///"+r.protocol.toUpperCase();
		r.origin=r.protocol+"//"+r.host;
	}
	r.href=r.origin+r.pathname+r.search+r.hash;
	return m && r;
}

function buildUrl(btn,urlname,sid){
	var opt={
		base:"cbid.overwall."+sid,
		get:function(opt){
			var id=this.base+'.'+opt;
			var obj=document.getElementsByName(id)[0] || document.getElementsByClassName(id)[0] || document.getElementById(id)
			if (obj){
				return obj;
			}else{
				return null;
			}
		},
		getlist:function(opt){
			var id=this.base+'.'+opt;
			var objs=document.getElementsByName(id) || document.getElementsByClassName(id);
			var ret=[];
			if (objs){
				for (var i=0;i < objs.length;i++){
					ret[i]=objs[i].value;
				}
			}else{
				alert("<%:Fatal on get option,please help in debug%>:"+opt);
			}
			return ret;
		},
		query:function(param,src,tval="1",fval="0"){
			var ret="&"+param+"=";
			var obj=this.get(src);
			if (obj){
				if (obj.type=="checkbox"){
					return ret+(obj.checked==true ? tval:fval);
				}else{
					return ret+encodeURIComponent(obj.value);
				}
			}
			return ''
		}
	}

	var s=document.getElementById(urlname+"-status");
	if (!s) return false;
	var v_type=opt.get("type").value;
	var v_alias=opt.get("alias").value;
	var url=null;
	switch (v_type){
	case "ss":
		var v_server=opt.get("server");
		var v_port=opt.get("server_port");
		var v_method=opt.get("encrypt_method_ss");
		var v_password=opt.get("password");
		url=b64encsafe(v_method.value+":"+v_password.value)+"@"+
			v_server.value+":"+
			v_port.value+"/?";
		var params='';
		var v_plugin=opt.get("plugin").value;
		if (v_plugin){
			var v_plugin_opts=opt.get("plugin_opts").value;
			if (v_plugin_opts && v_plugin_opts!=''){
				v_plugin+=encodeURI(";"+v_plugin_opts);
			}
			params+="&plugin="+encodeURI(v_plugin);
		}
		params+="#"+encodeURI(v_alias);
		if (params[0]=="&"){
			params=params.substring(1);
		}
		url+=params;
		break;
	case "ssr":
		var v_server=opt.get("server");
		var v_port=opt.get("server_port");
		var v_protocol=opt.get("protocol");
		var v_method=opt.get("encrypt_method");
		var v_obfs=opt.get("obfs");
		var v_password=opt.get("password");
		var v_obfs_param=opt.get("obfs_param");
		var v_protocol_param=opt.get("protocol_param");
		var ssr_str=v_server.value+":"+
			v_port.value+":"+
			v_protocol.value+":"+
			v_method.value+":"+
			v_obfs.value+":"+
			b64encsafe(v_password.value)+
			"/?obfsparam="+b64encsafe(v_obfs_param.value)+
			"&protoparam="+b64encsafe(v_protocol_param.value)+
			"&remarks="+b64encutf8safe(v_alias);
		url=b64encsafe(ssr_str);
		break;
	case "vmess":
		var info={};
		info.v="2";
		info.ps=v_alias;
		info.add=opt.get("server").value;
		info.port=opt.get("server_port").value;
		info.id=opt.get("uuid").value;
		info.aid=opt.get("alter_id").value || "0";
		var v_transport=opt.get("transport").value;
		if (v_transport=="ws"){
			info.host=opt.get("ws_host").value;
			info.path=opt.get("ws_path").value;
		}else if (v_transport=="h2"){
			info.host=opt.get("h2_host").value;
			info.path=opt.get("h2_path").value;
		}else if (v_transport=="tcp"){
			info.type=opt.get("tcp_guise").value;
			if (info.type=='http'){
				info.host=opt.get("http_host").value;
				info.path=opt.get("http_path").value;
			}
		}else if (v_transport=="kcp"){
			info.type=opt.get("kcp_guise").value;
			info.seed=opt.get("seed").value;
		}else if (v_transport=="quic"){
			info.type=opt.get("quic_guise").value;
			info.key=opt.get("quic_key").value;
			info.securty=opt.get("quic_security").value;
		}else if (v_transport=="grpc"){
			info.serviceName=opt.get("grpc_serviceName").value;
		}
		if (info.path && info.path!=''){
			info.path=encodeURI(info.path);
		}
		info.net=v_transport;
		info.security=opt.get("security").value || "auto";
		if (opt.get("tls").checked){
			info.tls="tls";
			info.sni=opt.get("tls_host").value;
		}
		url=b64EncodeUnicode(JSON.stringify(info));
		break;
	case "vless":
		var v_password=opt.get("uuid");
		var v_server=opt.get("server");
		var v_port=opt.get("server_port");
		url=encodeURIComponent(v_password.value)+
			"@"+v_server.value+
			":"+v_port.value+"?";
		var params='';
		var v_transport=opt.get("transport").value;
		if (v_transport=="ws"){
			params+=opt.query("host","ws_host");
			params+=opt.query("path","ws_path");
		}else if (v_transport=="h2"){
			params+=opt.query("host","h2_host");
			params+=opt.query("path","h2_path");
		}else if (v_transport=="tcp"){
			params+=opt.query("headerType","tcp_guise");
			params+=opt.query("host","http_host");
			params+=opt.query("path","http_path");
		}else if (v_transport=="kcp"){
			params+=opt.query("headerType","kcp_guise");
			params+=opt.query("seed","seed");
		}else if (v_transport=="quic"){
			params+=opt.query("headerType","quic_guise");
			params+=opt.query("key","quic_key");
			params+=opt.query("quicSecurity","quic_security");
		}else if (v_transport=="grpc"){
			params+=opt.query("serviceName","grpc_serviceName");
		}
		params+="&type="+v_transport;
		params+=opt.query("encryption","vless_encryption");
		if (opt.get("tls").checked || opt.get("xtls").checked){
			if (opt.get("xtls").checked){
				v_security="xtls";
				var v_flow=opt.get("vless_flow").value;
				params+="&flow="+v_flow;
			}else{
				var v_security="tls";
			}
			params+="&security="+v_security;
			params+=opt.query("sni","tls_host");
		}
		params+="#"+encodeURI(v_alias);
		if (params[0]=="&"){
			params=params.substring(1);
		}
		url+=params;
		break;
	case "trojan":
		var v_password=opt.get("password");
		var v_server=opt.get("server");
		var v_port=opt.get("server_port");
		url=encodeURIComponent(v_password.value)+
			"@"+v_server.value+
			":"+v_port.value+"/?";
		var params='';
		if (opt.get("tls").checked){
			params+=opt.query("sni","tls_host");
			params+="&tls=1"
			params+=opt.query("allowinsecure","insecure");
		}
		params+="#"+encodeURI(v_alias);
		if (params[0]=="&"){
			params=params.substring(1);
		}
		url+=params;
	}
	if (url){
		url=v_type.toLowerCase()+"://"+url;
		var textarea=document.createElement("textarea");
		textarea.textContent= url;
		textarea.style.position="fixed";
		document.body.appendChild(textarea);
		textarea.select();
		try{
			document.execCommand("copy");// Security exception may be thrown by some browsers.
			s.innerHTML="<font color='green'><%:URL to clipboard successful%></font>";
		}catch (ex){
			s.innerHTML="<font color='red'><%:URL to clipboard failed%></font>";
		}finally{
			document.body.removeChild(textarea);
		}
	}else{
		s.innerHTML='';
		alert("<%:Not a supported Format%>: "+v_type);
	}
	return false;
}

function fromUrl(btn,urlname,sid){
	var opt={
		base:"cbid.overwall."+sid,
		get:function(opt){
			var id=this.base+'.'+opt;
			var obj=document.getElementsByName(id)[0] || document.getElementById(id);
			if (obj){
				return obj;
			}else{
				return null;
			}
		},
		set:function(opt,val){
			var obj=this.get(opt);
			if (obj){
				if (obj.type=='checkbox'){
					var event=document.createEvent("HTMLEvents");
					event.initEvent("change",true,true);
					obj.checked=val;
					obj.dispatchEvent(event);
				}else{
					obj.value=val;
				}
			}
		},
		setlist:function(opt,vlist){
			var id=this.base+'.'+opt;
			var objs=document.getElementsByName(id) || document.getElementsByClassName(id);
			if (objs){
				var values='';
				for (var i=0;i < vlist.length;i++){
					values+=vlist[i]+",";
				}
				alert("Manually input the option:\n"+opt+"s:\n["+values+"]");
			}
		}
	}

	var s=document.getElementById(urlname+'-status');
	if (!s) return false;
	var ssrurl=prompt('<%:Paste URL Here%>','');
	if (ssrurl==null || ssrurl=='') return false;
	var ssu=ssrurl.split('://');
	var event=document.createEvent("HTMLEvents");
	event.initEvent("change",true,true);
	switch (ssu[0]){
	default:
		s.innerHTML="<font color='red'><%:Invalid URL%></font>:"+ssu[0];
		return false;
	case "ss":
		ssu[1]=ssu[1].replace(/&group=.*#/,"#")
		var url0='',param='';
		var sipIndex=ssu[1].indexOf("@");
		var ploc=ssu[1].indexOf("#");
		if (ploc > 0){
			url0=ssu[1].substr(0,ploc);
			param=ssu[1].substr(ploc+1);
		}else{
			url0=ssu[1];
		}
		if (sipIndex!=-1){
			var userInfo=b64decsafe(url0.substr(0,sipIndex));
			var temp=url0.substr(sipIndex+1).split("/?");
			var serverInfo=temp[0].split(":");
			var server=serverInfo[0];
			var port=serverInfo[1];
			var method,password,plugin,pluginOpts;
			if (temp[1]){
				var pluginInfo=decodeURIComponent(temp[1]);
				var pluginIndex=pluginInfo.indexOf(";");
				var pluginNameInfo=pluginInfo.substr(0,pluginIndex);
				plugin=pluginNameInfo.substr(pluginNameInfo.indexOf("=")+1);
				if (plugin=="simple-obfs") plugin="obfs-local";
				pluginOpts=pluginInfo.substr(pluginIndex+1);
			}
			var userInfoSplitIndex=userInfo.indexOf(":");
			if (userInfoSplitIndex!=-1){
				method=userInfo.substr(0,userInfoSplitIndex);
				password=userInfo.substr(userInfoSplitIndex+1);
			}
			opt.set('type',"ss");
			opt.get('type').dispatchEvent(event);
			opt.set('server',server);
			opt.set('server_port',port);
			opt.set('password',password || '');
			opt.set('encrypt_method_ss',method || '');
			opt.set('plugin',plugin || '');
			if (plugin!=undefined){
				opt.get('plugin').dispatchEvent(event);
				opt.set('plugin_opts',pluginOpts || '');
			}
		}else{
			var sstr=b64decsafe(url0);
			var team=sstr.split('@');
			opt.set('type',"ss");
			opt.get('type').dispatchEvent(event);
			var part1=team[0].split(':');
			var part2=team[1].split(':');
			opt.set('server',part2[0]);
			opt.set('server_port',part2[1]);
			opt.set('password',part1[1]);
			opt.set('encrypt_method_ss',part1[0]);
		}
		if (param!=undefined){
			opt.set('alias',decodeURI(param));
		}
		break;
	case "ssr":
		var sstr=b64decsafe(ssu[1]);
		var ploc=sstr.indexOf("/?");
		var url0='',param='';
		if (ploc > 0){
			url0=sstr.substr(0,ploc);
			param=sstr.substr(ploc+2);
		}else{
			var url0=sstr;
		}
		console.log(param);
		var ssm=url0.match(/^(.+):([^:]+):([^:]*):([^:]+):([^:]*):([^:]+)/);
		if (!ssm || ssm.length < 7){
			s.innerHTML="<font color='red'><%:Invalid URL%></font>";
			return false;
		}
		var pdict={};
		if (param.length > 2){
			var a=param.split('&');
			for (var i=0;i < a.length;i++){
				var b=a[i].split('=');
				pdict[decodeURIComponent(b[0])]=decodeURIComponent(b[1] || '');
			}
		}
		opt.set('type',"ssr");
		opt.get('type').dispatchEvent(event);
		opt.set('server',ssm[1]);
		opt.set('server_port',ssm[2]);
		opt.set('protocol',ssm[3]);
		opt.set('encrypt_method',ssm[4]);
		opt.set('obfs',ssm[5]);
		opt.set('password',b64decsafe(ssm[6]));
		opt.set('obfs_param',dictvalue(pdict,'obfsparam'));
		opt.set('protocol_param',dictvalue(pdict,'protoparam'));
		var rem=pdict['remarks'];
		if (typeof(rem)!='undefined' && rem!='' && rem.length > 0) opt.set('alias',b64decutf8safe(rem));
		break;
	case "trojan":
		var m=parseNodeUrl(ssrurl);
		console.log(m.search);
		var password=m.passwd;
		if (password==''){
			s.innerHTML="<font color='red'><%:Invalid URL%></font>";
			return false;
		}
		var queryParam={};
		if (m.search.length > 1){
			var query=m.search.split('?');
			var queryParams=query[1];
			var queryArray=queryParams.split('&');
			var params;
			for (i=0;i < queryArray.length;i++){
				params=queryArray[i].split('=');
				queryParam[decodeURIComponent(params[0]).toLowerCase()]=decodeURIComponent(params[1] || '');
			}
		}
		opt.set('type',"trojan");
		opt.get('type').dispatchEvent(event);
		opt.set('server',m.hostname);
		opt.set('server_port',m.port);
		opt.set('password',decodeURIComponent(password));
		if (queryParam.peer || queryParam.sni){
			opt.set('tls',1);
			opt.set('tls_host',queryParam.peer || queryParam.sni);
			opt.set('insecure',queryParam.allowinsecure=='1');
		}else{
			opt.set('tls',0);
		}
		if (m.hash){
			opt.set('alias',decodeURI(m.hash.substr(1)));
		}
		break;
	case "vmess":
		if (ssu[1].indexOf("@")!=-1 || ssu[1].indexOf("?")!=-1){
			if (ssu[1].indexOf("@")!=-1){
				var ssm={};
				var m=parseNodeUrl(ssrurl);
				console.log(m.search);
				var password=m.passwd;
				if (password==''){
					s.innerHTML="<font color='red'><%:Invalid URL%></font>";
					return false;
				}
				var queryParam={};
				if (m.search.length > 1){
					var query=m.search.split('?');
					var queryParams=query[1];
					var queryArray=queryParams.split('&');
					var params;
					for (i=0;i < queryArray.length;i++){
						params=queryArray[i].split('=');
						queryParam[decodeURIComponent(params[0])]=decodeURIComponent(params[1] || '');
					}
				}
				ssm.ps=m.hash.substr(1)
				ssm.add=m.hostname
				ssm.port=m.port
				ssm.id=password
				ssm.security=queryParam.encryption
				ssm.tls=queryParam.security
				ssm.sni=queryParam.sni
				ssm.net=queryParam.type || "tcp"
				ssm.type=queryParam.headerType || "none"
				ssm.host=queryParam.host || ''
				ssm.path=queryParam.path || ''
				ssm.securty=queryParam.quicSecurity
				ssm.key=queryParam.key
				ssm.seed=queryParam.seed
				ssm.serviceName=queryParam.serviceName
			}else{
				s.innerHTML='';
				alert("<%:Not a supported Format%>: "+ssrurl);
				return false;
			}
		}else{
			var sstr=b64DecodeUnicode(ssu[1]);
			var ploc=sstr.indexOf("/?");
			var ssm=JSON.parse(sstr);
			console.log(ssm);
		}
		opt.set('type',"vmess");
		opt.get('type').dispatchEvent(event);
		opt.set('alias',ssm.ps);
		opt.set('server',ssm.add);
		opt.set('server_port',ssm.port);
		opt.set('alter_id',ssm.aid || '');
		opt.set('uuid',ssm.id);
		opt.set('security',ssm.security=="auto" || ! ssm.security ? "":ssm.security);
		opt.set('tls',ssm.tls=="tls" ? 1:0);
		opt.set('tls_host',ssm.sni || '');
		if (ssm.net=="kcp" || ssm.net=="mkcp") ssm.net="kcp"
		opt.set('transport',ssm.net);
		opt.get('transport').dispatchEvent(event);
		if (ssm.net=="ws"){
			opt.set('ws_host',ssm.host);
			opt.set('ws_path',ssm.path);
		}else if (ssm.net=="h2"){
			opt.set('h2_host',ssm.host);
			opt.set('h2_path',ssm.path);
		}else if (ssm.net=="tcp"){
			opt.set('tcp_guise',ssm.type);
			opt.get('tcp_guise').dispatchEvent(event);
			opt.set('http_host',ssm.host);
			opt.set('http_path',ssm.path);
		}else if (ssm.net=="kcp"){
			opt.set('kcp_guise',ssm.type);
			opt.set('seed',ssm.seed || '');
		}else if (ssm.net=="quic"){
			opt.set('quic_guise',ssm.type);
			opt.set('quic_key',ssm.key);
			opt.set('quic_security',ssm.securty);
		}else if (ssm.net=="grpc"){
			opt.set('grpc_serviceName',ssm.serviceName || '');
		}
		break;
	case "vless":
		opt.set('type',"vless");
		opt.get('type').dispatchEvent(event);
		var m=parseNodeUrl(ssrurl);
		console.log(m.search);
		var password=m.passwd;
		if (password==''){
			s.innerHTML="<font color='red'><%:Invalid URL%></font>";
			return false;
		}
		opt.set('uuid',password);
		opt.set('server',m.hostname);
		opt.set('server_port',m.port);
		opt.set('alias',m.hash.substr(1));
		var queryParam={};
		if (m.search.length > 1){
			var query=m.search.split('?');
			var queryParams=query[1];
			var queryArray=queryParams.split('&');
			var params;
			for (i=0;i < queryArray.length;i++){
				params=queryArray[i].split('=');
				queryParam[decodeURIComponent(params[0])]=decodeURIComponent(params[1] || '');
			}
		}
		opt.set('vless_encryption',queryParam.encryption || "none");
		opt.set('xtls',0);
		opt.set('tls',0);
		if (queryParam.security=="tls" || queryParam.security=="xtls"){
			if (queryParam.security=="xtls"){
				opt.set('xtls',1);
				opt.set('vless_flow',queryParam.flow || "xtls-rprx-splice");
			}else{
				opt.set('tls',1);
			}
			opt.set('tls_host',queryParam.sni || '');
			opt.set('insecure',queryParam.allowinsecure=='1' ? 1:0);
		}
		if (queryParam.type=="kcp" || queryParam.type=="mkcp") queryParam.type="kcp"
		opt.set('transport',queryParam.type || "tcp");
		opt.get('transport').dispatchEvent(event);
		if (queryParam.type=="ws"){
			opt.set('ws_host',queryParam.host || '');
			opt.set('ws_path',queryParam.path || '');
		}else if (queryParam.type=="h2"){
			opt.set('h2_host',queryParam.host || '');
			opt.set('h2_path',queryParam.path || '');
		}else if (queryParam.type=="tcp"){
			opt.set('tcp_guise',queryParam.headerType || "none");
			opt.get('tcp_guise').dispatchEvent(event);
			opt.set('http_host',queryParam.host || '');
			opt.set('http_path',queryParam.path || '');
		}else if (queryParam.type=="kcp"){
			opt.set('kcp_guise',queryParam.headerType || "none");
			opt.set('seed',queryParam.seed || '');
		}else if (queryParam.type=="quic"){
			opt.set('quic_guise',queryParam.headerType || "none");
			opt.set('quic_key',queryParam.key);
			opt.set('quic_security',queryParam.quicSecurity);
		}else if (queryParam.type=="grpc"){
			opt.set('grpc_serviceName',queryParam.serviceName || '');
		}
	}
	s.innerHTML="<font color='green'><%:Import Successful%></font>";
	return false;
}
//]]></script>
<input type="button" class="cbi-button cbi-button-apply" value="<%:Import%>" onclick="return fromUrl(this,'<%=self.option%>','<%=self.value%>')"/>
<input type="button" class="cbi-button cbi-button-apply" value='<%:Export%>' onclick="return buildUrl(this,'<%=self.option%>','<%=self.value%>')"/>
<span id="<%=self.option%>-status"></span>
<%+cbi/valuefooter%>
